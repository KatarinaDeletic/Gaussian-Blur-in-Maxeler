#ifdef MAXCOMPILER_VERSION_INFO
#define MAXCOMPILER_VERSION_INFO_PRESENT 1
#define MAXFILE_MAXCOMPILER_VERSION_YEAR         2019
#define MAXFILE_MAXCOMPILER_VERSION_NUM          2
#define MAXFILE_MAXCOMPILER_VERSION_POINT        0
#define MAXFILE_MAXCOMPILER_VERSION_PATCH        ""
#define MAXFILE_MAXCOMPILER_VERSION_REV          "f5495a7"
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_DATE "2019-10-10"
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_MODE true
#endif

#ifdef MAXFILE_BUILD_INFO
#define MAXFILE_BUILD_INFO_PRESENT 1
#define MAXFILE_BUILD_NAME "GaussianBlurDFE"
#define MAXFILE_BUILD_DIR  "/home/maxeler/workspace/GaussianBlurDFE/builds/build1/GaussianBlurDFE_MAX5C_DFE_SIM"
#define MAXFILE_BUILD_DATE  20200504
#define MAXFILE_BUILD_REV   1
#endif

#ifdef PARAM
#define PARAM_PRESENT 1
PARAM(nxMax, 8192)
PARAM(DYNAMIC_CLOCKS_ENABLED, 0)
PARAM(APP_ID, 0)
PARAM(REV_ID, 0)
PARAM(CHAIN_LENGTH, 43)
PARAM(IS_SIMULATION, 1)
PARAM(MEC_SUPPORTED, 1)
PARAM(PCIE_SLAVE_STREAMING, 0)
PARAM(PCIE_ALIGNMENT, 16)
PARAM(NUM_IFPGA_LINKS, 0)
#endif

#ifdef STRING_PARAM
#define STRING_PARAM_PRESENT 1
STRING_PARAM(BOARD_MODEL, "MAX5_LIMA")
#endif



#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "GaussianBlurDFEKernel.h"
#endif



#ifdef ENGINE_PARAMETERS
#define ENGINE_PARAMETERS_PRESENT 1
ENGINE_PARAMETERS(DFEModel, <DFEModel>, GALAVA)
ENGINE_PARAMETERS(maxFileName, <string>, "GaussianBlurDFE")
ENGINE_PARAMETERS(target, Target, DFE_SIM)
ENGINE_PARAMETERS(enableMPCX, <boolean>, false)
ENGINE_PARAMETERS(MPPRStartCT, <integer>, 1)
ENGINE_PARAMETERS(MPPREndCT, <integer>, 1)
ENGINE_PARAMETERS(MPPRThreads, <integer>, 1)
ENGINE_PARAMETERS(MPPRRetryThreshold, <integer>, 0)
#endif




#ifdef MANAGER_NODE
#define MANAGER_NODE_PRESENT 1
MANAGER_NODE(GaussianBlurDFEKernel, Kernel)
MANAGER_NODE(x, PCIe_From_Host)
MANAGER_NODE(y, PCIe_To_Host)
MANAGER_NODE(Stream_3, DualAspectMux)
MANAGER_NODE(Stream_5, DualAspectReg)
MANAGER_NODE(Stream_14, StreamPullPushAdapter)
MANAGER_NODE(Stream_8, Fifo)
MANAGER_NODE(Stream_10, Fifo)
MANAGER_NODE(Stream_12, Fifo)
#endif

#ifdef MANAGER_NODE_IO
#define MANAGER_NODE_IO_PRESENT 1
MANAGER_NODE_IO(GaussianBlurDFEKernel, x, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(GaussianBlurDFEKernel, y, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(x, x, OUT, PCIE, 128, PUSH)
MANAGER_NODE_IO(y, y, IN, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_3, input, IN, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_3, output, OUT, PCIE, 32, PUSH)
MANAGER_NODE_IO(Stream_5, input, IN, PCIE, 32, PULL)
MANAGER_NODE_IO(Stream_5, output, OUT, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_14, input, IN, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_14, output, OUT, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_8, input, IN, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_8, output, OUT, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_10, input, IN, PCIE, 32, PUSH)
MANAGER_NODE_IO(Stream_10, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_12, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_12, output, OUT, PCIE, 32, PULL)
#endif

#ifdef MANAGER_STREAM
#define MANAGER_STREAM_PRESENT 1
MANAGER_STREAM(x, x, Stream_8, input, 128)
MANAGER_STREAM(GaussianBlurDFEKernel, y, Stream_12, input, 32)
MANAGER_STREAM(Stream_3, output, Stream_10, input, 32)
MANAGER_STREAM(Stream_5, output, Stream_14, input, 128)
MANAGER_STREAM(Stream_14, output, y, y, 128)
MANAGER_STREAM(Stream_8, output, Stream_3, input, 128)
MANAGER_STREAM(Stream_10, output, GaussianBlurDFEKernel, x, 32)
MANAGER_STREAM(Stream_12, output, Stream_5, input, 32)
#endif

#ifdef MANAGER_NODE_STACK_TRACE
#define MANAGER_NODE_STACK_TRACE_PRESENT 1
MANAGER_NODE_STACK_TRACE(GaussianBlurDFEKernel, "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
MANAGER_NODE_STACK_TRACE(x, "com.maxeler.maxcompiler.v2.managers.custom.api.ManagerPCIe.addStreamFromCPU(ManagerPCIe.java:58)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:18)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
MANAGER_NODE_STACK_TRACE(y, "com.maxeler.maxcompiler.v2.managers.custom.api.ManagerPCIe.addStreamToCPU(ManagerPCIe.java:29)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:21)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
MANAGER_NODE_STACK_TRACE(Stream_3, "com.maxeler.platform.max5.manager.Max5ManagerBase.build(Unknown Source)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:29)\n")
MANAGER_NODE_STACK_TRACE(Stream_5, "com.maxeler.platform.max5.manager.Max5ManagerBase.build(Unknown Source)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:29)\n")
MANAGER_NODE_STACK_TRACE(Stream_14, "com.maxeler.platform.max5.manager.Max5ManagerBase.build(Unknown Source)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:29)\n")
MANAGER_NODE_STACK_TRACE(Stream_8, "com.maxeler.platform.max5.manager.Max5ManagerBase.build(Unknown Source)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:29)\n")
MANAGER_NODE_STACK_TRACE(Stream_10, "com.maxeler.platform.max5.manager.Max5ManagerBase.build(Unknown Source)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:29)\n")
MANAGER_NODE_STACK_TRACE(Stream_12, "com.maxeler.platform.max5.manager.Max5ManagerBase.build(Unknown Source)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:29)\n")
#endif


#ifdef USER_CLOCKS
#define USER_CLOCKS_PRESENT 1
USER_CLOCKS(STREAM, 100.0, false)
#endif

#ifdef MANAGER_NODE_PROPERTY
#define MANAGER_NODE_PROPERTY_PRESENT 1
MANAGER_NODE_PROPERTY(GaussianBlurDFEKernel, control_pipelining_depth, 2)
#endif


#ifdef KERNEL_CORE
#define KERNEL_CORE_PRESENT 1
KERNEL_CORE(GaussianBlurDFEKernel)
#endif

#ifdef KERNEL_HOST_CONTROLLED
#define KERNEL_HOST_CONTROLLED_PRESENT 1
KERNEL_HOST_CONTROLLED(GaussianBlurDFEKernel, GaussianBlurDFEKernel)
#endif

#ifdef DEBUG_INPUT_BITS
#define DEBUG_INPUT_BITS_PRESENT 1
DEBUG_INPUT_BITS(GaussianBlurDFEKernel, x, 0)
#endif

#ifdef DEBUG_OUTPUT_BITS
#define DEBUG_OUTPUT_BITS_PRESENT 1
DEBUG_OUTPUT_BITS(GaussianBlurDFEKernel, y, 0)
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_CTOR
#define MANAGER_NODE_CPP_SIM_MODEL_CTOR_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_CTOR(x, PCIePushSourceSync16, "x")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_8, FifoPushToPullSync, "Stream_8", false, 512, 128)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_3, DualAspectMuxSync, "Stream_3", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_10, FifoPushToPullSync, "Stream_10", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(GaussianBlurDFEKernel, GaussianBlurDFEKernel, "GaussianBlurDFEKernel")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_12, FifoPushToPullSync, "Stream_12", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_5, DualAspectRegSync, "Stream_5", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_14, PullToPushAdapterSync, "Stream_14")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(y, PCIePushSinkSync16, "y")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(CapabilityReg, CapRegs, "CapabilityReg", 0, 1, 1, 0, 0, 0, 0, 0, 43)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ifpga, IFPGARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(sfa, SFARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ChecksumMemory, ChecksumMem, "ChecksumMemory", "de7c7cc08f322dfad8caf768f0fd02db695703eb3fd84809dfe6e9e175fc2a5e")
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_SETUP
#define MANAGER_NODE_CPP_SIM_MODEL_SETUP_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_SETUP(GaussianBlurDFEKernel, addDebugRegister, reg_dbg_ctld_almost_empty, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(GaussianBlurDFEKernel, addDebugRegister, reg_dbg_ctld_done, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(GaussianBlurDFEKernel, addDebugRegister, reg_dbg_ctld_empty, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(GaussianBlurDFEKernel, addDebugRegister, reg_dbg_ctld_read, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(GaussianBlurDFEKernel, addDebugRegister, reg_dbg_ctld_read_pipe_dbg, 3, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(GaussianBlurDFEKernel, addDebugRegister, reg_dbg_ctld_request, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(GaussianBlurDFEKernel, addDebugRegister, reg_dbg_done_out, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(GaussianBlurDFEKernel, addDebugRegister, reg_dbg_fill_level, 5, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(GaussianBlurDFEKernel, addDebugRegister, reg_dbg_flush_level, 5, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(GaussianBlurDFEKernel, addDebugRegister, reg_dbg_flush_start, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(GaussianBlurDFEKernel, addDebugRegister, reg_dbg_flush_start_level, 5, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(GaussianBlurDFEKernel, addDebugRegister, reg_dbg_flushing, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(GaussianBlurDFEKernel, addDebugRegister, reg_dbg_full_level, 5, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(GaussianBlurDFEKernel, addDebugRegister, reg_dbg_out_stall, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(GaussianBlurDFEKernel, addDebugRegister, reg_dbg_out_valid, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(GaussianBlurDFEKernel, addDebugRegister, reg_dbg_stall_vector, 1, 0)
#endif

#ifdef PCIE_STREAM
#define PCIE_STREAM_PRESENT 1
PCIE_STREAM(x, STREAM_FROM_HOST, 0)
PCIE_STREAM(y, STREAM_TO_HOST, 0)
#endif








#ifdef REG
#define REG_PRESENT 1
REG(GaussianBlurDFEKernel.io_x_force_disabled, 0x0, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(GaussianBlurDFEKernel.w, 0x1, 4, hwOffsetFix(32, 0, TWOSCOMPLEMENT))
REG(GaussianBlurDFEKernel.size, 0x5, 4, hwOffsetFix(32, 0, TWOSCOMPLEMENT))
REG(GaussianBlurDFEKernel.io_y_force_disabled, 0x9, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(GaussianBlurDFEKernel.run_cycle_count, 0xa, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(GaussianBlurDFEKernel.current_run_cycle_count, 0x10, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(GaussianBlurDFEKernel.dbg_ctld_almost_empty, 0x16, 1, hwBits(1))
REG(GaussianBlurDFEKernel.dbg_ctld_done, 0x17, 1, hwBits(1))
REG(GaussianBlurDFEKernel.dbg_ctld_empty, 0x18, 1, hwBits(1))
REG(GaussianBlurDFEKernel.dbg_ctld_read, 0x19, 1, hwBits(1))
REG(GaussianBlurDFEKernel.dbg_ctld_read_pipe_dbg, 0x1a, 1, hwBits(3))
REG(GaussianBlurDFEKernel.dbg_ctld_request, 0x1b, 1, hwBits(1))
REG(GaussianBlurDFEKernel.dbg_done_out, 0x1c, 1, hwBits(1))
REG(GaussianBlurDFEKernel.dbg_fill_level, 0x1d, 1, hwBits(5))
REG(GaussianBlurDFEKernel.dbg_flush_level, 0x1e, 1, hwBits(5))
REG(GaussianBlurDFEKernel.dbg_flush_start, 0x1f, 1, hwBits(1))
REG(GaussianBlurDFEKernel.dbg_flush_start_level, 0x20, 1, hwBits(5))
REG(GaussianBlurDFEKernel.dbg_flushing, 0x21, 1, hwBits(1))
REG(GaussianBlurDFEKernel.dbg_full_level, 0x22, 1, hwBits(5))
REG(GaussianBlurDFEKernel.dbg_out_stall, 0x23, 1, hwBits(1))
REG(GaussianBlurDFEKernel.dbg_out_valid, 0x24, 1, hwBits(1))
REG(GaussianBlurDFEKernel.dbg_stall_vector, 0x25, 1, hwBits(1))
REG(ifpga.ifpga_ctrl, 0x26, 1, hwBits(8))
REG(SignalForwardingAdapter.SFA_FORWARD_EN, 0x27, 4, hwBits(32))
#endif

#ifdef REG_V2
#define REG_V2_PRESENT 1
REG_V2(GaussianBlurDFEKernel.io_x_force_disabled, 0x0, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(GaussianBlurDFEKernel.w, 0x1, 4, hwOffsetFix(32, 0, TWOSCOMPLEMENT), HOST_WRITE_ONLY, false)
REG_V2(GaussianBlurDFEKernel.size, 0x5, 4, hwOffsetFix(32, 0, TWOSCOMPLEMENT), HOST_WRITE_ONLY, false)
REG_V2(GaussianBlurDFEKernel.io_y_force_disabled, 0x9, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(GaussianBlurDFEKernel.run_cycle_count, 0xa, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(GaussianBlurDFEKernel.current_run_cycle_count, 0x10, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(GaussianBlurDFEKernel.dbg_ctld_almost_empty, 0x16, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(GaussianBlurDFEKernel.dbg_ctld_done, 0x17, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(GaussianBlurDFEKernel.dbg_ctld_empty, 0x18, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(GaussianBlurDFEKernel.dbg_ctld_read, 0x19, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(GaussianBlurDFEKernel.dbg_ctld_read_pipe_dbg, 0x1a, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(GaussianBlurDFEKernel.dbg_ctld_request, 0x1b, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(GaussianBlurDFEKernel.dbg_done_out, 0x1c, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(GaussianBlurDFEKernel.dbg_fill_level, 0x1d, 1, hwBits(5), HOST_READ_ONLY, false)
REG_V2(GaussianBlurDFEKernel.dbg_flush_level, 0x1e, 1, hwBits(5), HOST_READ_ONLY, false)
REG_V2(GaussianBlurDFEKernel.dbg_flush_start, 0x1f, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(GaussianBlurDFEKernel.dbg_flush_start_level, 0x20, 1, hwBits(5), HOST_READ_ONLY, false)
REG_V2(GaussianBlurDFEKernel.dbg_flushing, 0x21, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(GaussianBlurDFEKernel.dbg_full_level, 0x22, 1, hwBits(5), HOST_READ_ONLY, false)
REG_V2(GaussianBlurDFEKernel.dbg_out_stall, 0x23, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(GaussianBlurDFEKernel.dbg_out_valid, 0x24, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(GaussianBlurDFEKernel.dbg_stall_vector, 0x25, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(ifpga.ifpga_ctrl, 0x26, 1, hwBits(8), HOST_READ_WRITE, false)
REG_V2(SignalForwardingAdapter.SFA_FORWARD_EN, 0x27, 4, hwBits(32), HOST_READ_WRITE, false)
#endif




#ifdef CHECKSUM
#define CHECKSUM_PRESENT 1
CHECKSUM("de7c7cc08f322dfad8caf768f0fd02db695703eb3fd84809dfe6e9e175fc2a5e")
#endif

#ifdef CAPABILITY
#define CAPABILITY_PRESENT 1
CAPABILITY(LIMAREV, LIMAREVA)
CAPABILITY(LIMARAM, DDR4_48GB)
CAPABILITY(LIMAFPGA, xcVU9P_FLGB2104_2_E)
#endif

#ifdef DEFINE_DESIGN_NAME
#define DESIGN_NAME GaussianBlurDFE
#endif /* DEFINE_DESIGN_NAME */

#ifndef SLIC_NO_DECLARATIONS
/**\file */
#ifndef SLIC_DECLARATIONS_GaussianBlurDFE_H
#define SLIC_DECLARATIONS_GaussianBlurDFE_H
#include "MaxSLiCInterface.h"
#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#define GaussianBlurDFE_PCIE_ALIGNMENT (16)
#define GaussianBlurDFE_nxMax (8192)


/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/




/**
 * \brief Basic static function for the interface 'default'.
 * 
 * \param [in] ticks_GaussianBlurDFEKernel The number of ticks for which kernel "GaussianBlurDFEKernel" will run.
 * \param [in] inscalar_GaussianBlurDFEKernel_size Input scalar parameter "GaussianBlurDFEKernel.size".
 * \param [in] inscalar_GaussianBlurDFEKernel_w Input scalar parameter "GaussianBlurDFEKernel.w".
 * \param [in] instream_x Stream "x".
 * \param [in] instream_size_x The size of the stream instream_x in bytes.
 * \param [out] outstream_y Stream "y".
 * \param [in] outstream_size_y The size of the stream outstream_y in bytes.
 */
void GaussianBlurDFE(
	uint64_t ticks_GaussianBlurDFEKernel,
	uint64_t inscalar_GaussianBlurDFEKernel_size,
	uint64_t inscalar_GaussianBlurDFEKernel_w,
	const void *instream_x,
	size_t instream_size_x,
	void *outstream_y,
	size_t outstream_size_y);

/**
 * \brief Basic static non-blocking function for the interface 'default'.
 * 
 * Schedule to run on an engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 * 
 * 
 * \param [in] ticks_GaussianBlurDFEKernel The number of ticks for which kernel "GaussianBlurDFEKernel" will run.
 * \param [in] inscalar_GaussianBlurDFEKernel_size Input scalar parameter "GaussianBlurDFEKernel.size".
 * \param [in] inscalar_GaussianBlurDFEKernel_w Input scalar parameter "GaussianBlurDFEKernel.w".
 * \param [in] instream_x Stream "x".
 * \param [in] instream_size_x The size of the stream instream_x in bytes.
 * \param [out] outstream_y Stream "y".
 * \param [in] outstream_size_y The size of the stream outstream_y in bytes.
 * \return A handle on the execution status, or NULL in case of error.
 */
max_run_t *GaussianBlurDFE_nonblock(
	uint64_t ticks_GaussianBlurDFEKernel,
	uint64_t inscalar_GaussianBlurDFEKernel_size,
	uint64_t inscalar_GaussianBlurDFEKernel_w,
	const void *instream_x,
	size_t instream_size_x,
	void *outstream_y,
	size_t outstream_size_y);

/**
 * \brief Advanced static interface, structure for the engine interface 'default'
 * 
 */
typedef struct { 
	uint64_t ticks_GaussianBlurDFEKernel; /**<  [in] The number of ticks for which kernel "GaussianBlurDFEKernel" will run. */
	uint64_t inscalar_GaussianBlurDFEKernel_size; /**<  [in] Input scalar parameter "GaussianBlurDFEKernel.size". */
	uint64_t inscalar_GaussianBlurDFEKernel_w; /**<  [in] Input scalar parameter "GaussianBlurDFEKernel.w". */
	const void *instream_x; /**<  [in] Stream "x". */
	size_t instream_size_x; /**<  [in] The size of the stream instream_x in bytes. */
	void *outstream_y; /**<  [out] Stream "y". */
	size_t outstream_size_y; /**<  [in] The size of the stream outstream_y in bytes. */
} GaussianBlurDFE_actions_t;

/**
 * \brief Advanced static function for the interface 'default'.
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in,out] interface_actions Actions to be executed.
 */
void GaussianBlurDFE_run(
	max_engine_t *engine,
	GaussianBlurDFE_actions_t *interface_actions);

/**
 * \brief Advanced static non-blocking function for the interface 'default'.
 *
 * Schedule the actions to run on the engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in] interface_actions Actions to be executed.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *GaussianBlurDFE_run_nonblock(
	max_engine_t *engine,
	GaussianBlurDFE_actions_t *interface_actions);

/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void GaussianBlurDFE_run_group(max_group_t *group, GaussianBlurDFE_actions_t *interface_actions);

/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *GaussianBlurDFE_run_group_nonblock(max_group_t *group, GaussianBlurDFE_actions_t *interface_actions);

/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void GaussianBlurDFE_run_array(max_engarray_t *engarray, GaussianBlurDFE_actions_t *interface_actions[]);

/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *GaussianBlurDFE_run_array_nonblock(max_engarray_t *engarray, GaussianBlurDFE_actions_t *interface_actions[]);

/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* GaussianBlurDFE_convert(max_file_t *maxfile, GaussianBlurDFE_actions_t *interface_actions);

/**
 * \brief Initialise a maxfile.
 */
max_file_t* GaussianBlurDFE_init(void);

/* Error handling functions */
int GaussianBlurDFE_has_errors(void);
const char* GaussianBlurDFE_get_errors(void);
void GaussianBlurDFE_clear_errors(void);
/* Free statically allocated maxfile data */
void GaussianBlurDFE_free(void);
/* returns: -1 = error running command; 0 = no error reported */
int GaussianBlurDFE_simulator_start(void);
/* returns: -1 = error running command; 0 = no error reported */
int GaussianBlurDFE_simulator_stop(void);

#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* SLIC_DECLARATIONS_GaussianBlurDFE_H */

#endif /* SLIC_NO_DECLARATIONS */

#ifdef PHOTON_NODE_DATA
#define PHOTON_NODE_DATA_PRESENT 1
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 271, NodeInputMappedReg, "Scalar input (io_y_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:850)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:77)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 272, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:850)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:77)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 0, NodeInputMappedReg, "Scalar input (io_x_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:629)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:15)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 1, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:629)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:15)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 2, NodeInput, "Input(x)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:629)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:15)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 379, NodeFIFO, "FIFO(1)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 25, NodeStreamOffset, "stream offset: -4", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:514)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:35)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 378, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0xffffffff; -1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:945)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:35)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 3, NodeInputMappedReg, "Scalar input (w)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:1193)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:17)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 292, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:945)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:35)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 26, NodeStreamOffset, "stream offset: -4", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:514)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:35)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 27, NodeDynamicStreamOffset, "dynamic offset: [-4, 0]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:514)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:35)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 293, NodeShift, ">> 16", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.shiftRight(DFEVar.java:262)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:53)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 83, NodeReinterpret, "<{HWOffsetFix:32, 0, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.shiftRight(DFEVar.java:262)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:53)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 32, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:514)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:35)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 288, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0xffffffff; -1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:945)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:35)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 34, NodeDynamicStreamOffset, "dynamic offset: [-1, 0]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:514)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:35)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 294, NodeShift, ">> 16", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.shiftRight(DFEVar.java:262)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:53)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 295, NodeReinterpret, "<{HWOffsetFix:32, 1, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1035)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:57)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 296, NodeCast, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1035)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:57)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 116, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:61)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 377, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0xffffffff; -1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:945)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:35)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 38, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:945)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:35)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 39, NodeStreamOffset, "stream offset: -2", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:514)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:35)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 40, NodeDynamicStreamOffset, "dynamic offset: [0, 2]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:514)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:35)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 297, NodeShift, ">> 16", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.shiftRight(DFEVar.java:262)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:53)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 121, NodeReinterpret, "<{HWOffsetFix:32, 0, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.shiftRight(DFEVar.java:262)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:53)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 135, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:61)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 391, NodeFIFO, "FIFO(1)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 392, NodeFIFO, "FIFO(1)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 45, NodeStreamOffset, "stream offset: -3", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:514)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:35)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 298, NodeNeg, "(-)", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1055)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:35)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 46, NodeStreamOffset, "stream offset: -3", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:514)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:35)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 47, NodeDynamicStreamOffset, "dynamic offset: [-3, 0]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:514)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:35)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 299, NodeShift, ">> 16", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.shiftRight(DFEVar.java:262)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:53)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 300, NodeReinterpret, "<{HWOffsetFix:32, 1, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1035)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:57)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 301, NodeCast, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1035)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:57)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 154, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:61)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 393, NodeFIFO, "FIFO(1)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 394, NodeFIFO, "FIFO(2)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 395, NodeFIFO, "FIFO(1)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 302, NodeShift, ">> 16", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.shiftRight(DFEVar.java:262)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:53)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 303, NodeReinterpret, "<{HWOffsetFix:32, 2, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1035)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:57)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 304, NodeCast, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1035)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:57)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 173, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:61)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 57, NodeStreamOffset, "stream offset: -3", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:514)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:35)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 58, NodeDynamicStreamOffset, "dynamic offset: [0, 3]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:514)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:35)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 305, NodeShift, ">> 16", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.shiftRight(DFEVar.java:262)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:53)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 306, NodeReinterpret, "<{HWOffsetFix:32, 1, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1035)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:57)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 307, NodeCast, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1035)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:57)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 192, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:61)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 63, NodeStreamOffset, "stream offset: -2", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:514)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:35)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 376, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:945)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:35)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 309, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:945)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:35)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 64, NodeStreamOffset, "stream offset: -2", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:514)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:35)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 65, NodeDynamicStreamOffset, "dynamic offset: [-2, 0]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:514)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:35)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 310, NodeShift, ">> 16", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.shiftRight(DFEVar.java:262)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:53)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 197, NodeReinterpret, "<{HWOffsetFix:32, 0, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.shiftRight(DFEVar.java:262)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:53)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 211, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:61)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 290, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:945)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:35)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 71, NodeDynamicStreamOffset, "dynamic offset: [0, 1]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:514)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:35)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 311, NodeShift, ">> 16", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.shiftRight(DFEVar.java:262)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:53)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 312, NodeReinterpret, "<{HWOffsetFix:32, 1, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1035)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:57)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 313, NodeCast, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1035)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:57)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 230, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:61)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 375, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:945)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:35)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 75, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:945)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:35)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 76, NodeStreamOffset, "stream offset: -4", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:514)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:35)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 77, NodeDynamicStreamOffset, "dynamic offset: [0, 4]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:514)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:35)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 314, NodeShift, ">> 16", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.shiftRight(DFEVar.java:262)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:53)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 235, NodeReinterpret, "<{HWOffsetFix:32, 0, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.shiftRight(DFEVar.java:262)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:53)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 249, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:61)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 315, NodeReinterpret, "<{HWOffsetFix:32, -4, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.div(DFEVar.java:1080)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:66)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 316, NodeCast, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.div(DFEVar.java:1080)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:66)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 317, NodeShift, "<< 8", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.shiftLeft(DFEVar.java:238)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:74)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 260, NodeReinterpret, "<{HWOffsetFix:32, 0, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.shiftLeft(DFEVar.java:238)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:74)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 388, NodeFIFO, "FIFO(2)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 318, NodeShift, ">> 8", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.shiftRight(DFEVar.java:262)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:54)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 86, NodeReinterpret, "<{HWOffsetFix:32, 0, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.shiftRight(DFEVar.java:262)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:54)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 374, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x000000ff; 255.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:594)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:54)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 88, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:594)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:54)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 319, NodeShift, ">> 8", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.shiftRight(DFEVar.java:262)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:54)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 105, NodeReinterpret, "<{HWOffsetFix:32, 0, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.shiftRight(DFEVar.java:262)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:54)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 373, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x000000ff; 255.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:594)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:54)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 107, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:594)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:54)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 320, NodeReinterpret, "<{HWOffsetFix:32, 1, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1035)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:58)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 321, NodeCast, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1035)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:58)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 117, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:62)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 322, NodeShift, ">> 8", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.shiftRight(DFEVar.java:262)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:54)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 124, NodeReinterpret, "<{HWOffsetFix:32, 0, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.shiftRight(DFEVar.java:262)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:54)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 372, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x000000ff; 255.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:594)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:54)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 126, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:594)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:54)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 136, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:62)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 323, NodeShift, ">> 8", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.shiftRight(DFEVar.java:262)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:54)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 143, NodeReinterpret, "<{HWOffsetFix:32, 0, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.shiftRight(DFEVar.java:262)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:54)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 371, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x000000ff; 255.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:594)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:54)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 145, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:594)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:54)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 324, NodeReinterpret, "<{HWOffsetFix:32, 1, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1035)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:58)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 325, NodeCast, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1035)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:58)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 155, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:62)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 326, NodeShift, ">> 8", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.shiftRight(DFEVar.java:262)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:54)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 162, NodeReinterpret, "<{HWOffsetFix:32, 0, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.shiftRight(DFEVar.java:262)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:54)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 370, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x000000ff; 255.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:594)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:54)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 164, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:594)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:54)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 327, NodeReinterpret, "<{HWOffsetFix:32, 2, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1035)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:58)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 328, NodeCast, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1035)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:58)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 174, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:62)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 329, NodeShift, ">> 8", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.shiftRight(DFEVar.java:262)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:54)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 181, NodeReinterpret, "<{HWOffsetFix:32, 0, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.shiftRight(DFEVar.java:262)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:54)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 369, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x000000ff; 255.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:594)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:54)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 183, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:594)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:54)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 330, NodeReinterpret, "<{HWOffsetFix:32, 1, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1035)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:58)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 331, NodeCast, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1035)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:58)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 193, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:62)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 332, NodeShift, ">> 8", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.shiftRight(DFEVar.java:262)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:54)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 200, NodeReinterpret, "<{HWOffsetFix:32, 0, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.shiftRight(DFEVar.java:262)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:54)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 368, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x000000ff; 255.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:594)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:54)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 202, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:594)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:54)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 212, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:62)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 333, NodeShift, ">> 8", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.shiftRight(DFEVar.java:262)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:54)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 219, NodeReinterpret, "<{HWOffsetFix:32, 0, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.shiftRight(DFEVar.java:262)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:54)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 367, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x000000ff; 255.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:594)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:54)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 221, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:594)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:54)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 334, NodeReinterpret, "<{HWOffsetFix:32, 1, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1035)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:58)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 335, NodeCast, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1035)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:58)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 231, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:62)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 336, NodeShift, ">> 8", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.shiftRight(DFEVar.java:262)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:54)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 238, NodeReinterpret, "<{HWOffsetFix:32, 0, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.shiftRight(DFEVar.java:262)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:54)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 366, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x000000ff; 255.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:594)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:54)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 240, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:594)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:54)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 250, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:62)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 337, NodeReinterpret, "<{HWOffsetFix:32, -4, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.div(DFEVar.java:1080)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:67)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 338, NodeCast, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.div(DFEVar.java:1080)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:67)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 365, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x000000ff; 255.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:594)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:74)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 262, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:594)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:74)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 263, NodeOr, "|", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.or(DFEVar.java:469)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:74)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 339, NodeShift, "<< 8", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.shiftLeft(DFEVar.java:238)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:75)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 266, NodeReinterpret, "<{HWOffsetFix:32, 0, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.shiftLeft(DFEVar.java:238)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:75)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 364, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x000000ff; 255.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:594)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:55)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 90, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:594)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:55)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 363, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x000000ff; 255.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:594)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:55)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 109, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:594)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:55)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 340, NodeReinterpret, "<{HWOffsetFix:32, 1, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1035)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:59)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 341, NodeCast, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1035)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:59)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 118, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:63)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 362, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x000000ff; 255.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:594)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:55)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 128, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:594)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:55)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 137, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:63)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 361, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x000000ff; 255.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:594)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:55)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 147, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:594)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:55)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 342, NodeReinterpret, "<{HWOffsetFix:32, 1, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1035)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:59)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 343, NodeCast, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1035)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:59)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 156, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:63)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 360, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x000000ff; 255.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:594)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:55)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 166, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:594)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:55)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 344, NodeReinterpret, "<{HWOffsetFix:32, 2, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1035)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:59)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 345, NodeCast, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1035)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:59)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 175, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:63)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 359, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x000000ff; 255.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:594)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:55)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 185, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:594)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:55)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 346, NodeReinterpret, "<{HWOffsetFix:32, 1, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1035)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:59)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 347, NodeCast, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1035)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:59)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 194, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:63)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 358, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x000000ff; 255.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:594)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:55)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 204, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:594)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:55)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 213, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:63)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 357, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x000000ff; 255.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:594)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:55)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 223, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:594)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:55)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 348, NodeReinterpret, "<{HWOffsetFix:32, 1, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1035)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:59)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 349, NodeCast, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1035)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:59)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 232, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:63)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 356, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x000000ff; 255.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:594)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:55)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 242, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:594)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:55)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 251, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:63)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 350, NodeReinterpret, "<{HWOffsetFix:32, -4, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.div(DFEVar.java:1080)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:68)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 351, NodeCast, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.div(DFEVar.java:1080)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:68)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 355, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x000000ff; 255.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:594)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:75)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 268, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:594)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:75)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 390, NodeFIFO, "FIFO(1)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 269, NodeOr, "|", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.or(DFEVar.java:469)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:75)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 274, NodeOutput, "Output(y)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:850)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:77)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 279, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 354, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 276, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 277, NodeCounter, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 278, NodeStreamOffset, "stream offset: 1", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 280, NodeOutputMappedReg, "Scalar output (current_run_cycle_count)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 353, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 282, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 283, NodeCounter, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 285, NodeInputMappedReg, "Scalar input (run_cycle_count)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 352, NodeEqInlined, "==", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 284, NodeFlush, "flush on trigger", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
PHOTON_NODE_DATA(GaussianBlurDFEKernel, 4, NodeInputMappedReg, "Scalar input (size)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:1193)\ngaussianblur.GaussianBlurDFEKernel.<init>(GaussianBlurDFEKernel.maxj:18)\ngaussianblur.GaussianBlurDFEManager.<init>(GaussianBlurDFEManager.maxj:17)\ngaussianblur.GaussianBlurDFEManager.main(GaussianBlurDFEManager.maxj:28)\n")
#endif

#ifdef SLIC_USE_DEFINITIONS
#include <stdio.h>
#include <math.h>
#include <pthread.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
static max_file_t *stored_maxfile = NULL;
static max_engine_t *stored_engine = NULL;
static char *stored_error = NULL;
static int stored_has_error = 0;
static pthread_once_t slic_bs_is_initialised = PTHREAD_ONCE_INIT;

static void set_error(const char *error_str)
{
	stored_has_error = 1; 
	if(stored_error == NULL) {
		stored_error = strdup(error_str);
	} else {
		char *nerr = malloc(strlen(stored_error) + strlen(error_str) + 2);
		sprintf(nerr, "%s\n%s", stored_error, error_str);
		free(stored_error);
		stored_error = nerr;
	}
}
static void set_error_and_free(char *error_str){
	set_error(error_str);
	free(error_str);
}
int GaussianBlurDFE_has_errors(void)
{	return stored_has_error; }
const char* GaussianBlurDFE_get_errors(void)
{	return stored_error; }
void GaussianBlurDFE_clear_errors(void)
{
	free(stored_error);
	stored_error = NULL;
	stored_has_error = 0;
}

static char GaussianBlurDFE_use_simulation[16];
static void GaussianBlurDFE_def_use_simulation(void)
{
	long pid = ((long) getpid()) % 100000;
	snprintf(GaussianBlurDFE_use_simulation, 16, "Gaussian_%05ld_", pid);
}
static const char *GaussianBlurDFE_check_use_simulation(void)
{
	GaussianBlurDFE_def_use_simulation();
	const char *use_sim = max_config_get_string(MAX_CONFIG_USE_SIMULATION);
	if (use_sim == NULL) {
		use_sim = GaussianBlurDFE_use_simulation;
		max_config_set_string(MAX_CONFIG_USE_SIMULATION, use_sim);
	}
	return use_sim;
}

static int GaussianBlurDFE_simulation_launch = 0;
int GaussianBlurDFE_simulator_start(void)
{
	int retval = 0;
	const char *use_sim = GaussianBlurDFE_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX5C -S simutils restart", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		if (strstr(buff, "Error")) {
			set_error(buff);
			retval = -1;
		}
	}
	pclose(pipe_fp);
	return retval;
}

int GaussianBlurDFE_simulator_stop(void)
{
	const char *use_sim = GaussianBlurDFE_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX5C -S simutils stop", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		;
	}
	pclose(pipe_fp);
	return 0;
}

static void GaussianBlurDFE_static_init(void) 
{
	stored_maxfile = GaussianBlurDFE_init();
	if (stored_maxfile == NULL || !max_ok(stored_maxfile->errors)) {
		stored_maxfile = NULL;
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to load maxfile"); return; }
	}
	if(!max_ok(max_global_errors())) {
		set_error_and_free(max_errors_trace(max_global_errors()));
		return;
	}
	if(!max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR))
		max_errors_mode(stored_maxfile->errors, 0);
	time_t timeout_previous = max_load_timeout(stored_maxfile, 30);
	const char *use_sim = GaussianBlurDFE_check_use_simulation();
	if (max_ping_daemon(stored_maxfile, use_sim) == 0) {
		int sim_stat = GaussianBlurDFE_simulator_start();
		if ((sim_stat == 0) && (max_ping_daemon(stored_maxfile, use_sim) == 1)) {
			GaussianBlurDFE_simulation_launch = 1;
		} else {
			set_error("Error: An error occurred while trying to start the simulation infrastructure automatically.");
			set_error("Error: Check that 'use_simulation=<simulator_name>' is set correctly in your SLiC configuration");
			set_error("Error: and that the associated simulated system daemon is running.");
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		}
	}
	stored_engine = max_load(stored_maxfile, "*");
	if (!max_ok(stored_maxfile->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) {
			fprintf(stderr, "\nUnable to load engine: aborting now.\n\n");
			fflush(stderr);
			abort();
		} else {
			set_error_and_free(max_errors_trace(stored_maxfile->errors));
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		} 
	} 
	max_load_timeout(stored_maxfile, timeout_previous);
}
void GaussianBlurDFE_free(void)
{
	if (stored_engine != NULL) {
		max_unload(stored_engine);
		stored_engine = NULL;
	}
	if (stored_maxfile != NULL) {
		max_file_free(stored_maxfile);
		stored_maxfile = NULL;
	}
	if (stored_error != NULL) {
		free(stored_error);
		stored_error = NULL;
	}
	if (GaussianBlurDFE_simulation_launch == 1) {
		int sim_stat = GaussianBlurDFE_simulator_stop();
		if (sim_stat != 0 ) {
			fprintf(stderr, "Error stopping simulator.");
		}
		GaussianBlurDFE_simulation_launch = 0;
	}
}

static int GaussianBlurDFE_get_pcie_alignment(void)
{
#ifdef GaussianBlurDFE_PCIE_ALIGNMENT
	return ((GaussianBlurDFE_PCIE_ALIGNMENT < 1) ? 16 : GaussianBlurDFE_PCIE_ALIGNMENT);
#else
	return 16;
#endif
}

static int GaussianBlurDFE_check_aligned(const void *data)
{
	uintptr_t pointer = (uintptr_t) data;
	int alignment = GaussianBlurDFE_get_pcie_alignment();
	return (pointer % alignment) ? 1 : 0;
}

static void *GaussianBlurDFE_malloc_aligned(const size_t size)
{
	void *ptr;
	int alignment = GaussianBlurDFE_get_pcie_alignment();
	posix_memalign(&ptr, alignment, size);
	return ptr;
}



/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/



#define CHECK_ERRORS_ST(ST, RET) if(!max_ok(ST->errors)) { if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n", max_errors_trace(ST->errors)); abort(); } set_error_and_free(max_errors_trace(ST->errors)); return RET; } 
#define CHECK_NULL(VALUE, MESSAGE, RET) if(VALUE == NULL) { if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n%s\n", (stored_error == NULL) ? "" : stored_error, MESSAGE); abort(); } set_error(MESSAGE); return RET; }

 
typedef struct GaussianBlurDFE_callback_stream {
	uint8_t *user_ptr;
	uint8_t *aligned_ptr;
	size_t   size;
	int      is_output;
} GaussianBlurDFE_callback_stream_t;

typedef struct GaussianBlurDFE_callback_data {
	GaussianBlurDFE_callback_stream_t stream[2]; 
	int count;
	int max_count;
} GaussianBlurDFE_callback_data_t;

static void GaussianBlurDFE_callback_internal(void *cb_data)
{
	GaussianBlurDFE_callback_data_t *data = (GaussianBlurDFE_callback_data_t*) cb_data;
	for (int i = 0 ; i < data->count ; i++ ) {
		GaussianBlurDFE_callback_stream_t *s = &data->stream[i];
		if (s->is_output && (s->size > 0)) {
			memcpy(s->user_ptr, s->aligned_ptr, s->size);
		}
		free(s->aligned_ptr);
	}
	free(data);
}

static max_actions_t* GaussianBlurDFE_convert_internal(
	max_file_t *maxfile,
	GaussianBlurDFE_actions_t *interface_actions,
	int  is_internal_call,
	void (**callback_func)(void*),
	void **callback_data)
{
	max_actions_t *actions = max_actions_init(maxfile, NULL);
	if(actions == NULL) return NULL;

#define CHECK_ERRORS if(!max_ok(actions->errors)) { set_error_and_free(max_errors_trace(actions->errors)); return NULL; } 

	GaussianBlurDFE_callback_data_t *cb_data = NULL;
	int use_callback = (callback_func != NULL) && (callback_data != NULL);
	if (use_callback) {
		cb_data = malloc(sizeof(GaussianBlurDFE_callback_data_t));
		if (cb_data == NULL) {
			fprintf(stderr, "Unable to allocate memory for stream callback data in function GaussianBlurDFE_convert_internal\n");
			return NULL;
		}
		cb_data->max_count = 2;
		cb_data->count     = 0;
		*callback_data     = cb_data;
		*callback_func     = &GaussianBlurDFE_callback_internal;
	}

	/* code for scalar GaussianBlurDFEKernel.run_cycle_count */
	uint64_t ticks_GaussianBlurDFEKernel = interface_actions->ticks_GaussianBlurDFEKernel;
	max_set_ticks(actions, "GaussianBlurDFEKernel", ticks_GaussianBlurDFEKernel);
	CHECK_ERRORS;
	/* end of code for scalar GaussianBlurDFEKernel.run_cycle_count*/
	
	/* code for scalar GaussianBlurDFEKernel.size */
	uint64_t inscalar_GaussianBlurDFEKernel_size = interface_actions->inscalar_GaussianBlurDFEKernel_size;
	max_set_uint64t(actions, "GaussianBlurDFEKernel", "size", inscalar_GaussianBlurDFEKernel_size);
	CHECK_ERRORS;
	/* end of code for scalar GaussianBlurDFEKernel.size*/
	
	/* code for scalar GaussianBlurDFEKernel.w */
	uint64_t inscalar_GaussianBlurDFEKernel_w = interface_actions->inscalar_GaussianBlurDFEKernel_w;
	max_set_uint64t(actions, "GaussianBlurDFEKernel", "w", inscalar_GaussianBlurDFEKernel_w);
	CHECK_ERRORS;
	/* end of code for scalar GaussianBlurDFEKernel.w*/
	
	/* code for stream x */
	size_t instream_size_x = interface_actions->instream_size_x;
	if (instream_size_x > 0) {
		const void *stream_ptr = interface_actions->instream_x;
		if (use_callback && (1 == GaussianBlurDFE_check_aligned(interface_actions->instream_x))) {
			void *aligned_instream_x = malloc(instream_size_x);
			if (aligned_instream_x == NULL) {
				char error_msg[256];
				snprintf(error_msg, sizeof(error_msg) / sizeof(char),
						"Failed to allocate %zu bytes of memory for stream x.",
						instream_size_x);
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, error_msg);
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->instream_x;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_instream_x;
			(&cb_data->stream[cb_data->count])->size        = instream_size_x;
			(&cb_data->stream[cb_data->count])->is_output   = 0;
			cb_data->count += 1;
			memcpy(aligned_instream_x, interface_actions->instream_x, instream_size_x);
			stream_ptr = aligned_instream_x;
		}
		max_queue_input(actions, "x", stream_ptr, instream_size_x);
		CHECK_ERRORS;
	}
	/* end of code for stream x */
	
	/* code for stream y */
	size_t outstream_size_y = interface_actions->outstream_size_y;
	if (outstream_size_y > 0) {
		void *stream_ptr = interface_actions->outstream_y;
		if (use_callback && (1 == GaussianBlurDFE_check_aligned(interface_actions->outstream_y))) {
			void *aligned_outstream_y = malloc(outstream_size_y);
			if (aligned_outstream_y == NULL) {
				char error_msg[256];
				snprintf(error_msg, sizeof(error_msg) / sizeof(char),
						"Failed to allocate %zu bytes of memory for stream y.",
						outstream_size_y);
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, error_msg);
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->outstream_y;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_outstream_y;
			(&cb_data->stream[cb_data->count])->size        = outstream_size_y;
			(&cb_data->stream[cb_data->count])->is_output   = 1;
			cb_data->count += 1;
			stream_ptr = aligned_outstream_y;
		}
		max_queue_output(actions, "y", stream_ptr, outstream_size_y);
		CHECK_ERRORS;
	}
	/* end of code for stream y */
	
	if (use_callback && cb_data->count == 0) {
		*callback_data = NULL;
		*callback_func = NULL;
		free(cb_data);
	}
	return actions;
#undef CHECK_ERRORS
}

void GaussianBlurDFE(
	uint64_t ticks_GaussianBlurDFEKernel,
	uint64_t inscalar_GaussianBlurDFEKernel_size,
	uint64_t inscalar_GaussianBlurDFEKernel_w,
	const void *instream_x,
	size_t instream_size_x,
	void *outstream_y,
	size_t outstream_size_y)
{
	(void) pthread_once(&slic_bs_is_initialised, GaussianBlurDFE_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", );
	max_run_t *run = GaussianBlurDFE_nonblock(ticks_GaussianBlurDFEKernel, inscalar_GaussianBlurDFEKernel_size, inscalar_GaussianBlurDFEKernel_w, instream_x, instream_size_x, outstream_y, outstream_size_y);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *GaussianBlurDFE_nonblock(
	uint64_t ticks_GaussianBlurDFEKernel,
	uint64_t inscalar_GaussianBlurDFEKernel_size,
	uint64_t inscalar_GaussianBlurDFEKernel_w,
	const void *instream_x,
	size_t instream_size_x,
	void *outstream_y,
	size_t outstream_size_y)
{
	GaussianBlurDFE_actions_t interface_actions;
	interface_actions.ticks_GaussianBlurDFEKernel = ticks_GaussianBlurDFEKernel;
	interface_actions.inscalar_GaussianBlurDFEKernel_size = inscalar_GaussianBlurDFEKernel_size;
	interface_actions.inscalar_GaussianBlurDFEKernel_w = inscalar_GaussianBlurDFEKernel_w;
	interface_actions.instream_x = instream_x;
	interface_actions.instream_size_x = instream_size_x;
	interface_actions.outstream_y = outstream_y;
	interface_actions.outstream_size_y = outstream_size_y;
	(void) pthread_once(&slic_bs_is_initialised, GaussianBlurDFE_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", NULL);
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = GaussianBlurDFE_convert_internal(stored_maxfile, &interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	CHECK_ERRORS_ST(stored_engine, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(stored_engine, actions);
	} else {
		run = max_run_nonblock_with_cb(stored_engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	CHECK_ERRORS_ST(actions, NULL);
	max_actions_free(actions);
	return run;
}

void GaussianBlurDFE_run(
	max_engine_t *engine,
	GaussianBlurDFE_actions_t *interface_actions)
{
	max_run_t *run = GaussianBlurDFE_run_nonblock(engine, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *GaussianBlurDFE_run_nonblock(
	max_engine_t *engine,
	GaussianBlurDFE_actions_t *interface_actions)
{
	max_file_t *maxfile = max_engine_get_max_file(engine); 
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = GaussianBlurDFE_convert_internal(maxfile, interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(engine, actions);
	} else {
		run = max_run_nonblock_with_cb(engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void GaussianBlurDFE_run_group(max_group_t *group, GaussianBlurDFE_actions_t *interface_actions)
{
	max_run_t *run = GaussianBlurDFE_run_group_nonblock(group, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *GaussianBlurDFE_run_group_nonblock(max_group_t *group, GaussianBlurDFE_actions_t *interface_actions)
{
	max_file_t *maxfile = max_group_get_max_file(group);
	max_actions_t *actions = GaussianBlurDFE_convert_internal(maxfile, interface_actions, 1, NULL, NULL);
	if(actions == NULL) return NULL;
	if(!max_ok(actions->errors)) return NULL;
	max_validate(actions);
	max_run_t *run = max_run_group_nonblock(group, actions);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void GaussianBlurDFE_run_array(max_engarray_t *engarray, GaussianBlurDFE_actions_t *interface_actions[])
{
	max_run_t *run = GaussianBlurDFE_run_array_nonblock(engarray, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *GaussianBlurDFE_run_array_nonblock(max_engarray_t *engarray, GaussianBlurDFE_actions_t *interface_actions[])
{
	max_file_t *maxfile = max_engarray_get_max_file(engarray, 0);
	int i;
	max_actarray_t *actarray = max_actarray_init(maxfile, engarray->size);
	if (actarray == NULL) return NULL;
	max_actions_t **arr_actions = malloc(engarray->size * sizeof(max_actions_t*));
	for ( i = 0 ; i < actarray->size; i++ ) {
		max_actions_t *actions = GaussianBlurDFE_convert_internal(maxfile, interface_actions[i], 1, NULL, NULL);
		if (actions == NULL) return NULL;
		arr_actions[i] = actions;
		max_set_action(actarray, i, actions);
	}
	max_run_t *run = max_run_array_nonblock(engarray, actarray);
	for ( i = 0 ; i < actarray->size ; i++ ) { max_actions_free(arr_actions[i]); }
	max_actarray_free(actarray);
	free(arr_actions);
	return run;
}


/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* GaussianBlurDFE_convert(max_file_t *maxfile, GaussianBlurDFE_actions_t *interface_actions)
{
	return GaussianBlurDFE_convert_internal(maxfile, interface_actions, 0, NULL, NULL);
}

#undef CHECK_ERRORS_ST
#undef CHECK_NULL



#endif /* SLIC_USE_DEFINITIONS */

#ifdef SLIC_DYNAMIC_CODE
SLIC_MODE_START(default)	
SLIC_MODE_END(default)

#endif /* SLIC_DYNAMIC_CODE */

#ifdef SKIN_META_DATA
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PG1h
eGZpbGUgZm9ybWF0LXZlcnNpb249IjIwMTIwMjAwIiBoZWFkZXI9IkdhdXNzaWFuQmx1ckRGRS5o
IiBuYW1lPSJHYXVzc2lhbkJsdXJERkUiPjxjb25zdGFudCBuYW1lPSJQQ0lFX0FMSUdOTUVOVCIg
dHlwZT0ibG9uZyIgdmFsdWU9IjE2Ii8+PGNvbnN0YW50IG5hbWU9Im54TWF4IiB0eXBlPSJsb25n
IiB2YWx1ZT0iODE5MiIvPjxlbmdpbmVtb2RlIG5hbWU9ImRlZmF1bHQiPjxmdW5jdGlvbiBuYW1l
PSJHYXVzc2lhbkJsdXJERkUiIHJldHVybi12YWx1ZT0idm9pZCI+PHNjYWxhciBkZXNjPSJUaGUg
bnVtYmVyIG9mIHRpY2tzIGZvciB3aGljaCBrZXJuZWwgJnF1b3Q7R2F1c3NpYW5CbHVyREZFS2Vy
bmVsJnF1b3Q7IHdpbGwgcnVuLiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0idGlja3NfR2F1c3Np
YW5CbHVyREZFS2VybmVsIiB0eXBlPSJ1aW50NjRfdCIvPjxzY2FsYXIgZGVzYz0iSW5wdXQgc2Nh
bGFyIHBhcmFtZXRlciAmcXVvdDtHYXVzc2lhbkJsdXJERkVLZXJuZWwuc2l6ZSZxdW90Oy4iIGRp
cmVjdGlvbj0iSW5wdXQiIG5hbWU9Imluc2NhbGFyX0dhdXNzaWFuQmx1ckRGRUtlcm5lbF9zaXpl
IiB0eXBlPSJ1aW50NjRfdCIvPjxzY2FsYXIgZGVzYz0iSW5wdXQgc2NhbGFyIHBhcmFtZXRlciAm
cXVvdDtHYXVzc2lhbkJsdXJERkVLZXJuZWwudyZxdW90Oy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5h
bWU9Imluc2NhbGFyX0dhdXNzaWFuQmx1ckRGRUtlcm5lbF93IiB0eXBlPSJ1aW50NjRfdCIvPjxh
cnJheSBkZXNjPSJTdHJlYW0gJnF1b3Q7eCZxdW90Oy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9
Imluc3RyZWFtX3giIHNpemU9Imluc3RyZWFtX3NpemVfeCIgdHJhbnNwb3NlPSJmYWxzZSIgdHlw
ZT0idm9pZCIvPjxzY2FsYXIgZGVzYz0iVGhlIHNpemUgb2YgdGhlIHN0cmVhbSBpbnN0cmVhbV94
IGluIGJ5dGVzLiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0iaW5zdHJlYW1fc2l6ZV94IiB0eXBl
PSJ1aW50NjRfdCIvPjxhcnJheSBkZXNjPSJTdHJlYW0gJnF1b3Q7eSZxdW90Oy4iIGRpcmVjdGlv
bj0iT3V0cHV0IiBuYW1lPSJvdXRzdHJlYW1feSIgc2l6ZT0ib3V0c3RyZWFtX3NpemVfeSIgdHJh
bnNwb3NlPSJmYWxzZSIgdHlwZT0idm9pZCIvPjxzY2FsYXIgZGVzYz0iVGhlIHNpemUgb2YgdGhl
IHN0cmVhbSBvdXRzdHJlYW1feSBpbiBieXRlcy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9Im91
dHN0cmVhbV9zaXplX3kiIHR5cGU9InVpbnQ2NF90Ii8+PC9mdW5jdGlvbj48L2VuZ2luZW1vZGU+
PC9tYXhmaWxlPg==
#endif /* SKIN_META_DATA */

#ifdef SLIC_B64_DEFINITIONS
I2luY2x1ZGUgPHN0ZGlvLmg+CiNpbmNsdWRlIDxtYXRoLmg+CiNpbmNsdWRlIDxwdGhyZWFkLmg+
CiNpbmNsdWRlIDxzdHJpbmcuaD4KI2luY2x1ZGUgPHVuaXN0ZC5oPgojaW5jbHVkZSA8c3RkbGli
Lmg+CnN0YXRpYyBtYXhfZmlsZV90ICpzdG9yZWRfbWF4ZmlsZSA9IE5VTEw7CnN0YXRpYyBtYXhf
ZW5naW5lX3QgKnN0b3JlZF9lbmdpbmUgPSBOVUxMOwpzdGF0aWMgY2hhciAqc3RvcmVkX2Vycm9y
ID0gTlVMTDsKc3RhdGljIGludCBzdG9yZWRfaGFzX2Vycm9yID0gMDsKc3RhdGljIHB0aHJlYWRf
b25jZV90IHNsaWNfYnNfaXNfaW5pdGlhbGlzZWQgPSBQVEhSRUFEX09OQ0VfSU5JVDsKCnN0YXRp
YyB2b2lkIHNldF9lcnJvcihjb25zdCBjaGFyICplcnJvcl9zdHIpCnsKCXN0b3JlZF9oYXNfZXJy
b3IgPSAxOyAKCWlmKHN0b3JlZF9lcnJvciA9PSBOVUxMKSB7CgkJc3RvcmVkX2Vycm9yID0gc3Ry
ZHVwKGVycm9yX3N0cik7Cgl9IGVsc2UgewoJCWNoYXIgKm5lcnIgPSBtYWxsb2Moc3RybGVuKHN0
b3JlZF9lcnJvcikgKyBzdHJsZW4oZXJyb3Jfc3RyKSArIDIpOwoJCXNwcmludGYobmVyciwgIiVz
XG4lcyIsIHN0b3JlZF9lcnJvciwgZXJyb3Jfc3RyKTsKCQlmcmVlKHN0b3JlZF9lcnJvcik7CgkJ
c3RvcmVkX2Vycm9yID0gbmVycjsKCX0KfQpzdGF0aWMgdm9pZCBzZXRfZXJyb3JfYW5kX2ZyZWUo
Y2hhciAqZXJyb3Jfc3RyKXsKCXNldF9lcnJvcihlcnJvcl9zdHIpOwoJZnJlZShlcnJvcl9zdHIp
Owp9CmludCBHYXVzc2lhbkJsdXJERkVfaGFzX2Vycm9ycyh2b2lkKQp7CXJldHVybiBzdG9yZWRf
aGFzX2Vycm9yOyB9CmNvbnN0IGNoYXIqIEdhdXNzaWFuQmx1ckRGRV9nZXRfZXJyb3JzKHZvaWQp
CnsJcmV0dXJuIHN0b3JlZF9lcnJvcjsgfQp2b2lkIEdhdXNzaWFuQmx1ckRGRV9jbGVhcl9lcnJv
cnModm9pZCkKewoJZnJlZShzdG9yZWRfZXJyb3IpOwoJc3RvcmVkX2Vycm9yID0gTlVMTDsKCXN0
b3JlZF9oYXNfZXJyb3IgPSAwOwp9CgpzdGF0aWMgY2hhciBHYXVzc2lhbkJsdXJERkVfdXNlX3Np
bXVsYXRpb25bMTZdOwpzdGF0aWMgdm9pZCBHYXVzc2lhbkJsdXJERkVfZGVmX3VzZV9zaW11bGF0
aW9uKHZvaWQpCnsKCWxvbmcgcGlkID0gKChsb25nKSBnZXRwaWQoKSkgJSAxMDAwMDA7CglzbnBy
aW50ZihHYXVzc2lhbkJsdXJERkVfdXNlX3NpbXVsYXRpb24sIDE2LCAiR2F1c3NpYW5fJTA1bGRf
IiwgcGlkKTsKfQpzdGF0aWMgY29uc3QgY2hhciAqR2F1c3NpYW5CbHVyREZFX2NoZWNrX3VzZV9z
aW11bGF0aW9uKHZvaWQpCnsKCUdhdXNzaWFuQmx1ckRGRV9kZWZfdXNlX3NpbXVsYXRpb24oKTsK
CWNvbnN0IGNoYXIgKnVzZV9zaW0gPSBtYXhfY29uZmlnX2dldF9zdHJpbmcoTUFYX0NPTkZJR19V
U0VfU0lNVUxBVElPTik7CglpZiAodXNlX3NpbSA9PSBOVUxMKSB7CgkJdXNlX3NpbSA9IEdhdXNz
aWFuQmx1ckRGRV91c2Vfc2ltdWxhdGlvbjsKCQltYXhfY29uZmlnX3NldF9zdHJpbmcoTUFYX0NP
TkZJR19VU0VfU0lNVUxBVElPTiwgdXNlX3NpbSk7Cgl9CglyZXR1cm4gdXNlX3NpbTsKfQoKc3Rh
dGljIGludCBHYXVzc2lhbkJsdXJERkVfc2ltdWxhdGlvbl9sYXVuY2ggPSAwOwppbnQgR2F1c3Np
YW5CbHVyREZFX3NpbXVsYXRvcl9zdGFydCh2b2lkKQp7CglpbnQgcmV0dmFsID0gMDsKCWNvbnN0
IGNoYXIgKnVzZV9zaW0gPSBHYXVzc2lhbkJsdXJERkVfY2hlY2tfdXNlX3NpbXVsYXRpb24oKTsK
CWNoYXIgYnVmZlsxMDI0XTsKCXNucHJpbnRmKGJ1ZmYsIDEwMjQsICJQQVRIPXNpbXV0aWxzOiRQ
QVRIIG1heGNvbXBpbGVyc2ltIC1kIDEgLW4gJXMgLWMgTUFYNUMgLVMgc2ltdXRpbHMgcmVzdGFy
dCIsIHVzZV9zaW0pOwoJRklMRSAqcGlwZV9mcCA9IHBvcGVuKGJ1ZmYsICJyIik7CglpZiAocGlw
ZV9mcCA9PSBOVUxMKSB7CgkJc3RybmNhdChidWZmLCAiIDogZmFpbGVkIHRvIGV4ZWN1dGUuIiwg
KDEwMjQgLSBzdHJsZW4oYnVmZikpKTsKCQlzZXRfZXJyb3IoYnVmZik7CgkJcmV0dXJuIC0xOwoJ
fQoJd2hpbGUgKGZnZXRzKGJ1ZmYsIDEwMjQsIHBpcGVfZnApICE9IE5VTEwpIHsKCQkvKiBVbmNv
bW1lbnQgdGhpcyB0byBnZXQgc2ltdWxhdG9yIGNvbW1hbmQgb3V0cHV0ICovCgkJLyogZnByaW50
ZihzdGRlcnIsIGJ1ZmYpOyAqLwoJCWlmIChzdHJzdHIoYnVmZiwgIkVycm9yIikpIHsKCQkJc2V0
X2Vycm9yKGJ1ZmYpOwoJCQlyZXR2YWwgPSAtMTsKCQl9Cgl9CglwY2xvc2UocGlwZV9mcCk7Cgly
ZXR1cm4gcmV0dmFsOwp9CgppbnQgR2F1c3NpYW5CbHVyREZFX3NpbXVsYXRvcl9zdG9wKHZvaWQp
CnsKCWNvbnN0IGNoYXIgKnVzZV9zaW0gPSBHYXVzc2lhbkJsdXJERkVfY2hlY2tfdXNlX3NpbXVs
YXRpb24oKTsKCWNoYXIgYnVmZlsxMDI0XTsKCXNucHJpbnRmKGJ1ZmYsIDEwMjQsICJQQVRIPXNp
bXV0aWxzOiRQQVRIIG1heGNvbXBpbGVyc2ltIC1kIDEgLW4gJXMgLWMgTUFYNUMgLVMgc2ltdXRp
bHMgc3RvcCIsIHVzZV9zaW0pOwoJRklMRSAqcGlwZV9mcCA9IHBvcGVuKGJ1ZmYsICJyIik7Cglp
ZiAocGlwZV9mcCA9PSBOVUxMKSB7CgkJc3RybmNhdChidWZmLCAiIDogZmFpbGVkIHRvIGV4ZWN1
dGUuIiwgKDEwMjQgLSBzdHJsZW4oYnVmZikpKTsKCQlzZXRfZXJyb3IoYnVmZik7CgkJcmV0dXJu
IC0xOwoJfQoJd2hpbGUgKGZnZXRzKGJ1ZmYsIDEwMjQsIHBpcGVfZnApICE9IE5VTEwpIHsKCQkv
KiBVbmNvbW1lbnQgdGhpcyB0byBnZXQgc2ltdWxhdG9yIGNvbW1hbmQgb3V0cHV0ICovCgkJLyog
ZnByaW50ZihzdGRlcnIsIGJ1ZmYpOyAqLwoJCTsKCX0KCXBjbG9zZShwaXBlX2ZwKTsKCXJldHVy
biAwOwp9CgpzdGF0aWMgdm9pZCBHYXVzc2lhbkJsdXJERkVfc3RhdGljX2luaXQodm9pZCkgCnsK
CXN0b3JlZF9tYXhmaWxlID0gR2F1c3NpYW5CbHVyREZFX2luaXQoKTsKCWlmIChzdG9yZWRfbWF4
ZmlsZSA9PSBOVUxMIHx8ICFtYXhfb2soc3RvcmVkX21heGZpbGUtPmVycm9ycykpIHsKCQlzdG9y
ZWRfbWF4ZmlsZSA9IE5VTEw7CgkJaWYobWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NU
QVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKSBhYm9ydCgpOwoJCWVsc2UgeyBzZXRfZXJy
b3IoIlVuYWJsZSB0byBsb2FkIG1heGZpbGUiKTsgcmV0dXJuOyB9Cgl9CglpZighbWF4X29rKG1h
eF9nbG9iYWxfZXJyb3JzKCkpKSB7CgkJc2V0X2Vycm9yX2FuZF9mcmVlKG1heF9lcnJvcnNfdHJh
Y2UobWF4X2dsb2JhbF9lcnJvcnMoKSkpOwoJCXJldHVybjsKCX0KCWlmKCFtYXhfY29uZmlnX2dl
dF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpCgkJbWF4
X2Vycm9yc19tb2RlKHN0b3JlZF9tYXhmaWxlLT5lcnJvcnMsIDApOwoJdGltZV90IHRpbWVvdXRf
cHJldmlvdXMgPSBtYXhfbG9hZF90aW1lb3V0KHN0b3JlZF9tYXhmaWxlLCAzMCk7Cgljb25zdCBj
aGFyICp1c2Vfc2ltID0gR2F1c3NpYW5CbHVyREZFX2NoZWNrX3VzZV9zaW11bGF0aW9uKCk7Cglp
ZiAobWF4X3BpbmdfZGFlbW9uKHN0b3JlZF9tYXhmaWxlLCB1c2Vfc2ltKSA9PSAwKSB7CgkJaW50
IHNpbV9zdGF0ID0gR2F1c3NpYW5CbHVyREZFX3NpbXVsYXRvcl9zdGFydCgpOwoJCWlmICgoc2lt
X3N0YXQgPT0gMCkgJiYgKG1heF9waW5nX2RhZW1vbihzdG9yZWRfbWF4ZmlsZSwgdXNlX3NpbSkg
PT0gMSkpIHsKCQkJR2F1c3NpYW5CbHVyREZFX3NpbXVsYXRpb25fbGF1bmNoID0gMTsKCQl9IGVs
c2UgewoJCQlzZXRfZXJyb3IoIkVycm9yOiBBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSB0cnlpbmcg
dG8gc3RhcnQgdGhlIHNpbXVsYXRpb24gaW5mcmFzdHJ1Y3R1cmUgYXV0b21hdGljYWxseS4iKTsK
CQkJc2V0X2Vycm9yKCJFcnJvcjogQ2hlY2sgdGhhdCAndXNlX3NpbXVsYXRpb249PHNpbXVsYXRv
cl9uYW1lPicgaXMgc2V0IGNvcnJlY3RseSBpbiB5b3VyIFNMaUMgY29uZmlndXJhdGlvbiIpOwoJ
CQlzZXRfZXJyb3IoIkVycm9yOiBhbmQgdGhhdCB0aGUgYXNzb2NpYXRlZCBzaW11bGF0ZWQgc3lz
dGVtIGRhZW1vbiBpcyBydW5uaW5nLiIpOwoJCQltYXhfZmlsZV9mcmVlKHN0b3JlZF9tYXhmaWxl
KTsKCQkJc3RvcmVkX21heGZpbGUgPSBOVUxMOwoJCQlyZXR1cm47CgkJfQoJfQoJc3RvcmVkX2Vu
Z2luZSA9IG1heF9sb2FkKHN0b3JlZF9tYXhmaWxlLCAiKiIpOwoJaWYgKCFtYXhfb2soc3RvcmVk
X21heGZpbGUtPmVycm9ycykpIHsKCQlpZihtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdf
U1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIHsKCQkJZnByaW50ZihzdGRlcnIsICJc
blVuYWJsZSB0byBsb2FkIGVuZ2luZTogYWJvcnRpbmcgbm93LlxuXG4iKTsKCQkJZmZsdXNoKHN0
ZGVycik7CgkJCWFib3J0KCk7CgkJfSBlbHNlIHsKCQkJc2V0X2Vycm9yX2FuZF9mcmVlKG1heF9l
cnJvcnNfdHJhY2Uoc3RvcmVkX21heGZpbGUtPmVycm9ycykpOwoJCQltYXhfZmlsZV9mcmVlKHN0
b3JlZF9tYXhmaWxlKTsKCQkJc3RvcmVkX21heGZpbGUgPSBOVUxMOwoJCQlyZXR1cm47CgkJfSAK
CX0gCgltYXhfbG9hZF90aW1lb3V0KHN0b3JlZF9tYXhmaWxlLCB0aW1lb3V0X3ByZXZpb3VzKTsK
fQp2b2lkIEdhdXNzaWFuQmx1ckRGRV9mcmVlKHZvaWQpCnsKCWlmIChzdG9yZWRfZW5naW5lICE9
IE5VTEwpIHsKCQltYXhfdW5sb2FkKHN0b3JlZF9lbmdpbmUpOwoJCXN0b3JlZF9lbmdpbmUgPSBO
VUxMOwoJfQoJaWYgKHN0b3JlZF9tYXhmaWxlICE9IE5VTEwpIHsKCQltYXhfZmlsZV9mcmVlKHN0
b3JlZF9tYXhmaWxlKTsKCQlzdG9yZWRfbWF4ZmlsZSA9IE5VTEw7Cgl9CglpZiAoc3RvcmVkX2Vy
cm9yICE9IE5VTEwpIHsKCQlmcmVlKHN0b3JlZF9lcnJvcik7CgkJc3RvcmVkX2Vycm9yID0gTlVM
TDsKCX0KCWlmIChHYXVzc2lhbkJsdXJERkVfc2ltdWxhdGlvbl9sYXVuY2ggPT0gMSkgewoJCWlu
dCBzaW1fc3RhdCA9IEdhdXNzaWFuQmx1ckRGRV9zaW11bGF0b3Jfc3RvcCgpOwoJCWlmIChzaW1f
c3RhdCAhPSAwICkgewoJCQlmcHJpbnRmKHN0ZGVyciwgIkVycm9yIHN0b3BwaW5nIHNpbXVsYXRv
ci4iKTsKCQl9CgkJR2F1c3NpYW5CbHVyREZFX3NpbXVsYXRpb25fbGF1bmNoID0gMDsKCX0KfQoK
c3RhdGljIGludCBHYXVzc2lhbkJsdXJERkVfZ2V0X3BjaWVfYWxpZ25tZW50KHZvaWQpCnsKI2lm
ZGVmIEdhdXNzaWFuQmx1ckRGRV9QQ0lFX0FMSUdOTUVOVAoJcmV0dXJuICgoR2F1c3NpYW5CbHVy
REZFX1BDSUVfQUxJR05NRU5UIDwgMSkgPyAxNiA6IEdhdXNzaWFuQmx1ckRGRV9QQ0lFX0FMSUdO
TUVOVCk7CiNlbHNlCglyZXR1cm4gMTY7CiNlbmRpZgp9CgpzdGF0aWMgaW50IEdhdXNzaWFuQmx1
ckRGRV9jaGVja19hbGlnbmVkKGNvbnN0IHZvaWQgKmRhdGEpCnsKCXVpbnRwdHJfdCBwb2ludGVy
ID0gKHVpbnRwdHJfdCkgZGF0YTsKCWludCBhbGlnbm1lbnQgPSBHYXVzc2lhbkJsdXJERkVfZ2V0
X3BjaWVfYWxpZ25tZW50KCk7CglyZXR1cm4gKHBvaW50ZXIgJSBhbGlnbm1lbnQpID8gMSA6IDA7
Cn0KCnN0YXRpYyB2b2lkICpHYXVzc2lhbkJsdXJERkVfbWFsbG9jX2FsaWduZWQoY29uc3Qgc2l6
ZV90IHNpemUpCnsKCXZvaWQgKnB0cjsKCWludCBhbGlnbm1lbnQgPSBHYXVzc2lhbkJsdXJERkVf
Z2V0X3BjaWVfYWxpZ25tZW50KCk7Cglwb3NpeF9tZW1hbGlnbigmcHRyLCBhbGlnbm1lbnQsIHNp
emUpOwoJcmV0dXJuIHB0cjsKfQoKCgovKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwovKi0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0gSW50ZXJmYWNlIGRlZmF1bHQgLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0qLwovKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoKCgojZGVmaW5lIENIRUNLX0VS
Uk9SU19TVChTVCwgUkVUKSBpZighbWF4X29rKFNULT5lcnJvcnMpKSB7IGlmKG1heF9jb25maWdf
Z2V0X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNfSU5URVJGQUNFX0FCT1JUX09OX0VSUk9SKSkgeyBm
cHJpbnRmKHN0ZGVyciwgIiVzXG4iLCBtYXhfZXJyb3JzX3RyYWNlKFNULT5lcnJvcnMpKTsgYWJv
cnQoKTsgfSBzZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vycm9yc190cmFjZShTVC0+ZXJyb3JzKSk7
IHJldHVybiBSRVQ7IH0gCiNkZWZpbmUgQ0hFQ0tfTlVMTChWQUxVRSwgTUVTU0FHRSwgUkVUKSBp
ZihWQUxVRSA9PSBOVUxMKSB7IGlmIChtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RB
VElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIHsgZnByaW50ZihzdGRlcnIsICIlc1xuJXNc
biIsIChzdG9yZWRfZXJyb3IgPT0gTlVMTCkgPyAiIiA6IHN0b3JlZF9lcnJvciwgTUVTU0FHRSk7
IGFib3J0KCk7IH0gc2V0X2Vycm9yKE1FU1NBR0UpOyByZXR1cm4gUkVUOyB9CgogCnR5cGVkZWYg
c3RydWN0IEdhdXNzaWFuQmx1ckRGRV9jYWxsYmFja19zdHJlYW0gewoJdWludDhfdCAqdXNlcl9w
dHI7Cgl1aW50OF90ICphbGlnbmVkX3B0cjsKCXNpemVfdCAgIHNpemU7CglpbnQgICAgICBpc19v
dXRwdXQ7Cn0gR2F1c3NpYW5CbHVyREZFX2NhbGxiYWNrX3N0cmVhbV90OwoKdHlwZWRlZiBzdHJ1
Y3QgR2F1c3NpYW5CbHVyREZFX2NhbGxiYWNrX2RhdGEgewoJR2F1c3NpYW5CbHVyREZFX2NhbGxi
YWNrX3N0cmVhbV90IHN0cmVhbVsyXTsgCglpbnQgY291bnQ7CglpbnQgbWF4X2NvdW50Owp9IEdh
dXNzaWFuQmx1ckRGRV9jYWxsYmFja19kYXRhX3Q7CgpzdGF0aWMgdm9pZCBHYXVzc2lhbkJsdXJE
RkVfY2FsbGJhY2tfaW50ZXJuYWwodm9pZCAqY2JfZGF0YSkKewoJR2F1c3NpYW5CbHVyREZFX2Nh
bGxiYWNrX2RhdGFfdCAqZGF0YSA9IChHYXVzc2lhbkJsdXJERkVfY2FsbGJhY2tfZGF0YV90Kikg
Y2JfZGF0YTsKCWZvciAoaW50IGkgPSAwIDsgaSA8IGRhdGEtPmNvdW50IDsgaSsrICkgewoJCUdh
dXNzaWFuQmx1ckRGRV9jYWxsYmFja19zdHJlYW1fdCAqcyA9ICZkYXRhLT5zdHJlYW1baV07CgkJ
aWYgKHMtPmlzX291dHB1dCAmJiAocy0+c2l6ZSA+IDApKSB7CgkJCW1lbWNweShzLT51c2VyX3B0
ciwgcy0+YWxpZ25lZF9wdHIsIHMtPnNpemUpOwoJCX0KCQlmcmVlKHMtPmFsaWduZWRfcHRyKTsK
CX0KCWZyZWUoZGF0YSk7Cn0KCnN0YXRpYyBtYXhfYWN0aW9uc190KiBHYXVzc2lhbkJsdXJERkVf
Y29udmVydF9pbnRlcm5hbCgKCW1heF9maWxlX3QgKm1heGZpbGUsCglHYXVzc2lhbkJsdXJERkVf
YWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucywKCWludCAgaXNfaW50ZXJuYWxfY2FsbCwKCXZv
aWQgKCoqY2FsbGJhY2tfZnVuYykodm9pZCopLAoJdm9pZCAqKmNhbGxiYWNrX2RhdGEpCnsKCW1h
eF9hY3Rpb25zX3QgKmFjdGlvbnMgPSBtYXhfYWN0aW9uc19pbml0KG1heGZpbGUsIE5VTEwpOwoJ
aWYoYWN0aW9ucyA9PSBOVUxMKSByZXR1cm4gTlVMTDsKCiNkZWZpbmUgQ0hFQ0tfRVJST1JTIGlm
KCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgeyBzZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vycm9y
c190cmFjZShhY3Rpb25zLT5lcnJvcnMpKTsgcmV0dXJuIE5VTEw7IH0gCgoJR2F1c3NpYW5CbHVy
REZFX2NhbGxiYWNrX2RhdGFfdCAqY2JfZGF0YSA9IE5VTEw7CglpbnQgdXNlX2NhbGxiYWNrID0g
KGNhbGxiYWNrX2Z1bmMgIT0gTlVMTCkgJiYgKGNhbGxiYWNrX2RhdGEgIT0gTlVMTCk7CglpZiAo
dXNlX2NhbGxiYWNrKSB7CgkJY2JfZGF0YSA9IG1hbGxvYyhzaXplb2YoR2F1c3NpYW5CbHVyREZF
X2NhbGxiYWNrX2RhdGFfdCkpOwoJCWlmIChjYl9kYXRhID09IE5VTEwpIHsKCQkJZnByaW50Zihz
dGRlcnIsICJVbmFibGUgdG8gYWxsb2NhdGUgbWVtb3J5IGZvciBzdHJlYW0gY2FsbGJhY2sgZGF0
YSBpbiBmdW5jdGlvbiBHYXVzc2lhbkJsdXJERkVfY29udmVydF9pbnRlcm5hbFxuIik7CgkJCXJl
dHVybiBOVUxMOwoJCX0KCQljYl9kYXRhLT5tYXhfY291bnQgPSAyOwoJCWNiX2RhdGEtPmNvdW50
ICAgICA9IDA7CgkJKmNhbGxiYWNrX2RhdGEgICAgID0gY2JfZGF0YTsKCQkqY2FsbGJhY2tfZnVu
YyAgICAgPSAmR2F1c3NpYW5CbHVyREZFX2NhbGxiYWNrX2ludGVybmFsOwoJfQoKCS8qIGNvZGUg
Zm9yIHNjYWxhciBHYXVzc2lhbkJsdXJERkVLZXJuZWwucnVuX2N5Y2xlX2NvdW50ICovCgl1aW50
NjRfdCB0aWNrc19HYXVzc2lhbkJsdXJERkVLZXJuZWwgPSBpbnRlcmZhY2VfYWN0aW9ucy0+dGlj
a3NfR2F1c3NpYW5CbHVyREZFS2VybmVsOwoJbWF4X3NldF90aWNrcyhhY3Rpb25zLCAiR2F1c3Np
YW5CbHVyREZFS2VybmVsIiwgdGlja3NfR2F1c3NpYW5CbHVyREZFS2VybmVsKTsKCUNIRUNLX0VS
Uk9SUzsKCS8qIGVuZCBvZiBjb2RlIGZvciBzY2FsYXIgR2F1c3NpYW5CbHVyREZFS2VybmVsLnJ1
bl9jeWNsZV9jb3VudCovCgkKCS8qIGNvZGUgZm9yIHNjYWxhciBHYXVzc2lhbkJsdXJERkVLZXJu
ZWwuc2l6ZSAqLwoJdWludDY0X3QgaW5zY2FsYXJfR2F1c3NpYW5CbHVyREZFS2VybmVsX3NpemUg
PSBpbnRlcmZhY2VfYWN0aW9ucy0+aW5zY2FsYXJfR2F1c3NpYW5CbHVyREZFS2VybmVsX3NpemU7
CgltYXhfc2V0X3VpbnQ2NHQoYWN0aW9ucywgIkdhdXNzaWFuQmx1ckRGRUtlcm5lbCIsICJzaXpl
IiwgaW5zY2FsYXJfR2F1c3NpYW5CbHVyREZFS2VybmVsX3NpemUpOwoJQ0hFQ0tfRVJST1JTOwoJ
LyogZW5kIG9mIGNvZGUgZm9yIHNjYWxhciBHYXVzc2lhbkJsdXJERkVLZXJuZWwuc2l6ZSovCgkK
CS8qIGNvZGUgZm9yIHNjYWxhciBHYXVzc2lhbkJsdXJERkVLZXJuZWwudyAqLwoJdWludDY0X3Qg
aW5zY2FsYXJfR2F1c3NpYW5CbHVyREZFS2VybmVsX3cgPSBpbnRlcmZhY2VfYWN0aW9ucy0+aW5z
Y2FsYXJfR2F1c3NpYW5CbHVyREZFS2VybmVsX3c7CgltYXhfc2V0X3VpbnQ2NHQoYWN0aW9ucywg
IkdhdXNzaWFuQmx1ckRGRUtlcm5lbCIsICJ3IiwgaW5zY2FsYXJfR2F1c3NpYW5CbHVyREZFS2Vy
bmVsX3cpOwoJQ0hFQ0tfRVJST1JTOwoJLyogZW5kIG9mIGNvZGUgZm9yIHNjYWxhciBHYXVzc2lh
bkJsdXJERkVLZXJuZWwudyovCgkKCS8qIGNvZGUgZm9yIHN0cmVhbSB4ICovCglzaXplX3QgaW5z
dHJlYW1fc2l6ZV94ID0gaW50ZXJmYWNlX2FjdGlvbnMtPmluc3RyZWFtX3NpemVfeDsKCWlmIChp
bnN0cmVhbV9zaXplX3ggPiAwKSB7CgkJY29uc3Qgdm9pZCAqc3RyZWFtX3B0ciA9IGludGVyZmFj
ZV9hY3Rpb25zLT5pbnN0cmVhbV94OwoJCWlmICh1c2VfY2FsbGJhY2sgJiYgKDEgPT0gR2F1c3Np
YW5CbHVyREZFX2NoZWNrX2FsaWduZWQoaW50ZXJmYWNlX2FjdGlvbnMtPmluc3RyZWFtX3gpKSkg
ewoJCQl2b2lkICphbGlnbmVkX2luc3RyZWFtX3ggPSBtYWxsb2MoaW5zdHJlYW1fc2l6ZV94KTsK
CQkJaWYgKGFsaWduZWRfaW5zdHJlYW1feCA9PSBOVUxMKSB7CgkJCQljaGFyIGVycm9yX21zZ1sy
NTZdOwoJCQkJc25wcmludGYoZXJyb3JfbXNnLCBzaXplb2YoZXJyb3JfbXNnKSAvIHNpemVvZihj
aGFyKSwKCQkJCQkJIkZhaWxlZCB0byBhbGxvY2F0ZSAlenUgYnl0ZXMgb2YgbWVtb3J5IGZvciBz
dHJlYW0geC4iLAoJCQkJCQlpbnN0cmVhbV9zaXplX3gpOwoJCQkJbWF4X3JlcG9ydF9lcnJvcl9z
bGljKGFjdGlvbnMtPmVycm9ycywgX19GSUxFX18sIF9fTElORV9fLCA1MjYsIGVycm9yX21zZyk7
CgkJCQlDSEVDS19FUlJPUlM7CgkJCX0KCQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291
bnRdKS0+dXNlcl9wdHIgICAgPSAodWludDhfdCopIGludGVyZmFjZV9hY3Rpb25zLT5pbnN0cmVh
bV94OwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5hbGlnbmVkX3B0ciA9
ICh1aW50OF90KikgYWxpZ25lZF9pbnN0cmVhbV94OwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9k
YXRhLT5jb3VudF0pLT5zaXplICAgICAgICA9IGluc3RyZWFtX3NpemVfeDsKCQkJKCZjYl9kYXRh
LT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+aXNfb3V0cHV0ICAgPSAwOwoJCQljYl9kYXRhLT5j
b3VudCArPSAxOwoJCQltZW1jcHkoYWxpZ25lZF9pbnN0cmVhbV94LCBpbnRlcmZhY2VfYWN0aW9u
cy0+aW5zdHJlYW1feCwgaW5zdHJlYW1fc2l6ZV94KTsKCQkJc3RyZWFtX3B0ciA9IGFsaWduZWRf
aW5zdHJlYW1feDsKCQl9CgkJbWF4X3F1ZXVlX2lucHV0KGFjdGlvbnMsICJ4Iiwgc3RyZWFtX3B0
ciwgaW5zdHJlYW1fc2l6ZV94KTsKCQlDSEVDS19FUlJPUlM7Cgl9CgkvKiBlbmQgb2YgY29kZSBm
b3Igc3RyZWFtIHggKi8KCQoJLyogY29kZSBmb3Igc3RyZWFtIHkgKi8KCXNpemVfdCBvdXRzdHJl
YW1fc2l6ZV95ID0gaW50ZXJmYWNlX2FjdGlvbnMtPm91dHN0cmVhbV9zaXplX3k7CglpZiAob3V0
c3RyZWFtX3NpemVfeSA+IDApIHsKCQl2b2lkICpzdHJlYW1fcHRyID0gaW50ZXJmYWNlX2FjdGlv
bnMtPm91dHN0cmVhbV95OwoJCWlmICh1c2VfY2FsbGJhY2sgJiYgKDEgPT0gR2F1c3NpYW5CbHVy
REZFX2NoZWNrX2FsaWduZWQoaW50ZXJmYWNlX2FjdGlvbnMtPm91dHN0cmVhbV95KSkpIHsKCQkJ
dm9pZCAqYWxpZ25lZF9vdXRzdHJlYW1feSA9IG1hbGxvYyhvdXRzdHJlYW1fc2l6ZV95KTsKCQkJ
aWYgKGFsaWduZWRfb3V0c3RyZWFtX3kgPT0gTlVMTCkgewoJCQkJY2hhciBlcnJvcl9tc2dbMjU2
XTsKCQkJCXNucHJpbnRmKGVycm9yX21zZywgc2l6ZW9mKGVycm9yX21zZykgLyBzaXplb2YoY2hh
ciksCgkJCQkJCSJGYWlsZWQgdG8gYWxsb2NhdGUgJXp1IGJ5dGVzIG9mIG1lbW9yeSBmb3Igc3Ry
ZWFtIHkuIiwKCQkJCQkJb3V0c3RyZWFtX3NpemVfeSk7CgkJCQltYXhfcmVwb3J0X2Vycm9yX3Ns
aWMoYWN0aW9ucy0+ZXJyb3JzLCBfX0ZJTEVfXywgX19MSU5FX18sIDUyNiwgZXJyb3JfbXNnKTsK
CQkJCUNIRUNLX0VSUk9SUzsKCQkJfQoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3Vu
dF0pLT51c2VyX3B0ciAgICA9ICh1aW50OF90KikgaW50ZXJmYWNlX2FjdGlvbnMtPm91dHN0cmVh
bV95OwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5hbGlnbmVkX3B0ciA9
ICh1aW50OF90KikgYWxpZ25lZF9vdXRzdHJlYW1feTsKCQkJKCZjYl9kYXRhLT5zdHJlYW1bY2Jf
ZGF0YS0+Y291bnRdKS0+c2l6ZSAgICAgICAgPSBvdXRzdHJlYW1fc2l6ZV95OwoJCQkoJmNiX2Rh
dGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5pc19vdXRwdXQgICA9IDE7CgkJCWNiX2RhdGEt
PmNvdW50ICs9IDE7CgkJCXN0cmVhbV9wdHIgPSBhbGlnbmVkX291dHN0cmVhbV95OwoJCX0KCQlt
YXhfcXVldWVfb3V0cHV0KGFjdGlvbnMsICJ5Iiwgc3RyZWFtX3B0ciwgb3V0c3RyZWFtX3NpemVf
eSk7CgkJQ0hFQ0tfRVJST1JTOwoJfQoJLyogZW5kIG9mIGNvZGUgZm9yIHN0cmVhbSB5ICovCgkK
CWlmICh1c2VfY2FsbGJhY2sgJiYgY2JfZGF0YS0+Y291bnQgPT0gMCkgewoJCSpjYWxsYmFja19k
YXRhID0gTlVMTDsKCQkqY2FsbGJhY2tfZnVuYyA9IE5VTEw7CgkJZnJlZShjYl9kYXRhKTsKCX0K
CXJldHVybiBhY3Rpb25zOwojdW5kZWYgQ0hFQ0tfRVJST1JTCn0KCnZvaWQgR2F1c3NpYW5CbHVy
REZFKAoJdWludDY0X3QgdGlja3NfR2F1c3NpYW5CbHVyREZFS2VybmVsLAoJdWludDY0X3QgaW5z
Y2FsYXJfR2F1c3NpYW5CbHVyREZFS2VybmVsX3NpemUsCgl1aW50NjRfdCBpbnNjYWxhcl9HYXVz
c2lhbkJsdXJERkVLZXJuZWxfdywKCWNvbnN0IHZvaWQgKmluc3RyZWFtX3gsCglzaXplX3QgaW5z
dHJlYW1fc2l6ZV94LAoJdm9pZCAqb3V0c3RyZWFtX3ksCglzaXplX3Qgb3V0c3RyZWFtX3NpemVf
eSkKewoJKHZvaWQpIHB0aHJlYWRfb25jZSgmc2xpY19ic19pc19pbml0aWFsaXNlZCwgR2F1c3Np
YW5CbHVyREZFX3N0YXRpY19pbml0KTsKCUNIRUNLX05VTEwoc3RvcmVkX21heGZpbGUsICJNYXhm
aWxlIHdhcyBub3QgbG9hZGVkIiwgKTsKCW1heF9ydW5fdCAqcnVuID0gR2F1c3NpYW5CbHVyREZF
X25vbmJsb2NrKHRpY2tzX0dhdXNzaWFuQmx1ckRGRUtlcm5lbCwgaW5zY2FsYXJfR2F1c3NpYW5C
bHVyREZFS2VybmVsX3NpemUsIGluc2NhbGFyX0dhdXNzaWFuQmx1ckRGRUtlcm5lbF93LCBpbnN0
cmVhbV94LCBpbnN0cmVhbV9zaXplX3gsIG91dHN0cmVhbV95LCBvdXRzdHJlYW1fc2l6ZV95KTsK
CUNIRUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwgKTsKCW1heF93YWl0KHJ1
bik7Cn0KCm1heF9ydW5fdCAqR2F1c3NpYW5CbHVyREZFX25vbmJsb2NrKAoJdWludDY0X3QgdGlj
a3NfR2F1c3NpYW5CbHVyREZFS2VybmVsLAoJdWludDY0X3QgaW5zY2FsYXJfR2F1c3NpYW5CbHVy
REZFS2VybmVsX3NpemUsCgl1aW50NjRfdCBpbnNjYWxhcl9HYXVzc2lhbkJsdXJERkVLZXJuZWxf
dywKCWNvbnN0IHZvaWQgKmluc3RyZWFtX3gsCglzaXplX3QgaW5zdHJlYW1fc2l6ZV94LAoJdm9p
ZCAqb3V0c3RyZWFtX3ksCglzaXplX3Qgb3V0c3RyZWFtX3NpemVfeSkKewoJR2F1c3NpYW5CbHVy
REZFX2FjdGlvbnNfdCBpbnRlcmZhY2VfYWN0aW9uczsKCWludGVyZmFjZV9hY3Rpb25zLnRpY2tz
X0dhdXNzaWFuQmx1ckRGRUtlcm5lbCA9IHRpY2tzX0dhdXNzaWFuQmx1ckRGRUtlcm5lbDsKCWlu
dGVyZmFjZV9hY3Rpb25zLmluc2NhbGFyX0dhdXNzaWFuQmx1ckRGRUtlcm5lbF9zaXplID0gaW5z
Y2FsYXJfR2F1c3NpYW5CbHVyREZFS2VybmVsX3NpemU7CglpbnRlcmZhY2VfYWN0aW9ucy5pbnNj
YWxhcl9HYXVzc2lhbkJsdXJERkVLZXJuZWxfdyA9IGluc2NhbGFyX0dhdXNzaWFuQmx1ckRGRUtl
cm5lbF93OwoJaW50ZXJmYWNlX2FjdGlvbnMuaW5zdHJlYW1feCA9IGluc3RyZWFtX3g7CglpbnRl
cmZhY2VfYWN0aW9ucy5pbnN0cmVhbV9zaXplX3ggPSBpbnN0cmVhbV9zaXplX3g7CglpbnRlcmZh
Y2VfYWN0aW9ucy5vdXRzdHJlYW1feSA9IG91dHN0cmVhbV95OwoJaW50ZXJmYWNlX2FjdGlvbnMu
b3V0c3RyZWFtX3NpemVfeSA9IG91dHN0cmVhbV9zaXplX3k7Cgkodm9pZCkgcHRocmVhZF9vbmNl
KCZzbGljX2JzX2lzX2luaXRpYWxpc2VkLCBHYXVzc2lhbkJsdXJERkVfc3RhdGljX2luaXQpOwoJ
Q0hFQ0tfTlVMTChzdG9yZWRfbWF4ZmlsZSwgIk1heGZpbGUgd2FzIG5vdCBsb2FkZWQiLCBOVUxM
KTsKCXZvaWQgKCpjYl9mdW5jKSh2b2lkKikgPSBOVUxMOwoJdm9pZCAgKmNiX2RhdGEgICAgICAg
ICA9IE5VTEw7CgltYXhfYWN0aW9uc190ICphY3Rpb25zID0gR2F1c3NpYW5CbHVyREZFX2NvbnZl
cnRfaW50ZXJuYWwoc3RvcmVkX21heGZpbGUsICZpbnRlcmZhY2VfYWN0aW9ucywgMSwgJmNiX2Z1
bmMsICZjYl9kYXRhKTsKCUNIRUNLX05VTEwoYWN0aW9ucywgIlVuYWJsZSB0byBidWlsZCBhY3Rp
b25zIiwgTlVMTCk7CgltYXhfdmFsaWRhdGUoYWN0aW9ucyk7CglDSEVDS19FUlJPUlNfU1QoYWN0
aW9ucywgTlVMTCk7CglDSEVDS19FUlJPUlNfU1Qoc3RvcmVkX2VuZ2luZSwgTlVMTCk7CgltYXhf
cnVuX3QgKnJ1bjsKCWlmIChjYl9mdW5jID09IE5VTEwpIHsKCQlydW4gPSBtYXhfcnVuX25vbmJs
b2NrKHN0b3JlZF9lbmdpbmUsIGFjdGlvbnMpOwoJfSBlbHNlIHsKCQlydW4gPSBtYXhfcnVuX25v
bmJsb2NrX3dpdGhfY2Ioc3RvcmVkX2VuZ2luZSwgYWN0aW9ucywgY2JfZnVuYywgY2JfZGF0YSk7
Cgl9CglDSEVDS19OVUxMKHJ1biwgIlVuYWJsZSB0byBydW4gYWN0aW9ucyIsIE5VTEwpOwoJQ0hF
Q0tfRVJST1JTX1NUKGFjdGlvbnMsIE5VTEwpOwoJbWF4X2FjdGlvbnNfZnJlZShhY3Rpb25zKTsK
CXJldHVybiBydW47Cn0KCnZvaWQgR2F1c3NpYW5CbHVyREZFX3J1bigKCW1heF9lbmdpbmVfdCAq
ZW5naW5lLAoJR2F1c3NpYW5CbHVyREZFX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnMpCnsK
CW1heF9ydW5fdCAqcnVuID0gR2F1c3NpYW5CbHVyREZFX3J1bl9ub25ibG9jayhlbmdpbmUsIGlu
dGVyZmFjZV9hY3Rpb25zKTsKCUNIRUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25z
IiwgKTsKCW1heF93YWl0KHJ1bik7Cn0KCm1heF9ydW5fdCAqR2F1c3NpYW5CbHVyREZFX3J1bl9u
b25ibG9jaygKCW1heF9lbmdpbmVfdCAqZW5naW5lLAoJR2F1c3NpYW5CbHVyREZFX2FjdGlvbnNf
dCAqaW50ZXJmYWNlX2FjdGlvbnMpCnsKCW1heF9maWxlX3QgKm1heGZpbGUgPSBtYXhfZW5naW5l
X2dldF9tYXhfZmlsZShlbmdpbmUpOyAKCXZvaWQgKCpjYl9mdW5jKSh2b2lkKikgPSBOVUxMOwoJ
dm9pZCAgKmNiX2RhdGEgICAgICAgICA9IE5VTEw7CgltYXhfYWN0aW9uc190ICphY3Rpb25zID0g
R2F1c3NpYW5CbHVyREZFX2NvbnZlcnRfaW50ZXJuYWwobWF4ZmlsZSwgaW50ZXJmYWNlX2FjdGlv
bnMsIDEsICZjYl9mdW5jLCAmY2JfZGF0YSk7CglDSEVDS19OVUxMKGFjdGlvbnMsICJVbmFibGUg
dG8gYnVpbGQgYWN0aW9ucyIsIE5VTEwpOwoJbWF4X3ZhbGlkYXRlKGFjdGlvbnMpOwoJQ0hFQ0tf
RVJST1JTX1NUKGFjdGlvbnMsIE5VTEwpOwoJbWF4X3J1bl90ICpydW47CglpZiAoY2JfZnVuYyA9
PSBOVUxMKSB7CgkJcnVuID0gbWF4X3J1bl9ub25ibG9jayhlbmdpbmUsIGFjdGlvbnMpOwoJfSBl
bHNlIHsKCQlydW4gPSBtYXhfcnVuX25vbmJsb2NrX3dpdGhfY2IoZW5naW5lLCBhY3Rpb25zLCBj
Yl9mdW5jLCBjYl9kYXRhKTsKCX0KCUNIRUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rp
b25zIiwgTlVMTCk7CgltYXhfYWN0aW9uc19mcmVlKGFjdGlvbnMpOwoJcmV0dXJuIHJ1bjsKfQoK
Ci8qKgogKiBcYnJpZWYgR3JvdXAgcnVuIGFkdmFuY2VkIHN0YXRpYyBmdW5jdGlvbiBmb3IgdGhl
IGludGVyZmFjZSAnZGVmYXVsdCcuCiAqIAogKiBccGFyYW0gW2luXSBncm91cCBHcm91cCB0byB1
c2UuCiAqIFxwYXJhbSBbaW4sb3V0XSBpbnRlcmZhY2VfYWN0aW9ucyBBY3Rpb25zIHRvIHJ1bi4K
ICoKICogUnVuIHRoZSBhY3Rpb25zIG9uIHRoZSBmaXJzdCBkZXZpY2UgYXZhaWxhYmxlIGluIHRo
ZSBncm91cC4KICovCnZvaWQgR2F1c3NpYW5CbHVyREZFX3J1bl9ncm91cChtYXhfZ3JvdXBfdCAq
Z3JvdXAsIEdhdXNzaWFuQmx1ckRGRV9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zKQp7Cglt
YXhfcnVuX3QgKnJ1biA9IEdhdXNzaWFuQmx1ckRGRV9ydW5fZ3JvdXBfbm9uYmxvY2soZ3JvdXAs
IGludGVyZmFjZV9hY3Rpb25zKTsKCUNIRUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rp
b25zIiwgKTsKCW1heF93YWl0KHJ1bik7Cn0KCgovKioKICogXGJyaWVmIEdyb3VwIHJ1biBhZHZh
bmNlZCBzdGF0aWMgbm9uLWJsb2NraW5nIGZ1bmN0aW9uIGZvciB0aGUgaW50ZXJmYWNlICdkZWZh
dWx0Jy4KICogCiAqCiAqIFNjaGVkdWxlIHRoZSBhY3Rpb25zIHRvIHJ1biBvbiB0aGUgZmlyc3Qg
ZGV2aWNlIGF2YWlsYWJsZSBpbiB0aGUgZ3JvdXAgYW5kIHJldHVybiBpbW1lZGlhdGVseS4KICog
VGhlIHN0YXR1cyBvZiB0aGUgcnVuIG11c3QgYmUgY2hlY2tlZCB3aXRoIDo6bWF4X3dhaXQuIAog
KiBOb3RlIHRoYXQgdXNlIG9mIDo6bWF4X25vd2FpdCBpcyBwcm9oaWJpdGVkIHdpdGggbm9uLWJs
b2NraW5nIHJ1bm5pbmcgb24gZ3JvdXBzOgogKiBzZWUgdGhlIDo6bWF4X3J1bl9ncm91cF9ub25i
bG9jayBkb2N1bWVudGF0aW9uIGZvciBtb3JlIGV4cGxhbmF0aW9uLgogKgogKiBccGFyYW0gW2lu
XSBncm91cCBHcm91cCB0byB1c2UuCiAqIFxwYXJhbSBbaW5dIGludGVyZmFjZV9hY3Rpb25zIEFj
dGlvbnMgdG8gcnVuLgogKiBccmV0dXJuIEEgaGFuZGxlIG9uIHRoZSBleGVjdXRpb24gc3RhdHVz
IG9mIHRoZSBhY3Rpb25zLCBvciBOVUxMIGluIGNhc2Ugb2YgZXJyb3IuCiAqLwptYXhfcnVuX3Qg
KkdhdXNzaWFuQmx1ckRGRV9ydW5fZ3JvdXBfbm9uYmxvY2sobWF4X2dyb3VwX3QgKmdyb3VwLCBH
YXVzc2lhbkJsdXJERkVfYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucykKewoJbWF4X2ZpbGVf
dCAqbWF4ZmlsZSA9IG1heF9ncm91cF9nZXRfbWF4X2ZpbGUoZ3JvdXApOwoJbWF4X2FjdGlvbnNf
dCAqYWN0aW9ucyA9IEdhdXNzaWFuQmx1ckRGRV9jb252ZXJ0X2ludGVybmFsKG1heGZpbGUsIGlu
dGVyZmFjZV9hY3Rpb25zLCAxLCBOVUxMLCBOVUxMKTsKCWlmKGFjdGlvbnMgPT0gTlVMTCkgcmV0
dXJuIE5VTEw7CglpZighbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJbWF4
X3ZhbGlkYXRlKGFjdGlvbnMpOwoJbWF4X3J1bl90ICpydW4gPSBtYXhfcnVuX2dyb3VwX25vbmJs
b2NrKGdyb3VwLCBhY3Rpb25zKTsKCW1heF9hY3Rpb25zX2ZyZWUoYWN0aW9ucyk7CglyZXR1cm4g
cnVuOwp9CgoKLyoqCiAqIFxicmllZiBBcnJheSBydW4gYWR2YW5jZWQgc3RhdGljIGZ1bmN0aW9u
IGZvciB0aGUgaW50ZXJmYWNlICdkZWZhdWx0Jy4KICogCiAqIFxwYXJhbSBbaW5dIGVuZ2FycmF5
IFRoZSBhcnJheSBvZiBkZXZpY2VzIHRvIHVzZS4KICogXHBhcmFtIFtpbixvdXRdIGludGVyZmFj
ZV9hY3Rpb25zIFRoZSBhcnJheSBvZiBhY3Rpb25zIHRvIHJ1bi4KICoKICogUnVuIHRoZSBhcnJh
eSBvZiBhY3Rpb25zIG9uIHRoZSBhcnJheSBvZiBlbmdpbmVzLiAgVGhlIGxlbmd0aCBvZiBpbnRl
cmZhY2VfYWN0aW9ucwogKiBtdXN0IG1hdGNoIHRoZSBzaXplIG9mIGVuZ2FycmF5LgogKi8Kdm9p
ZCBHYXVzc2lhbkJsdXJERkVfcnVuX2FycmF5KG1heF9lbmdhcnJheV90ICplbmdhcnJheSwgR2F1
c3NpYW5CbHVyREZFX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnNbXSkKewoJbWF4X3J1bl90
ICpydW4gPSBHYXVzc2lhbkJsdXJERkVfcnVuX2FycmF5X25vbmJsb2NrKGVuZ2FycmF5LCBpbnRl
cmZhY2VfYWN0aW9ucyk7CglDSEVDS19OVUxMKHJ1biwgIlVuYWJsZSB0byBydW4gYWN0aW9ucyIs
ICk7CgltYXhfd2FpdChydW4pOwp9CgoKLyoqCiAqIFxicmllZiBBcnJheSBydW4gYWR2YW5jZWQg
c3RhdGljIG5vbi1ibG9ja2luZyBmdW5jdGlvbiBmb3IgdGhlIGludGVyZmFjZSAnZGVmYXVsdCcu
CiAqIAogKgogKiBTY2hlZHVsZSB0byBydW4gdGhlIGFycmF5IG9mIGFjdGlvbnMgb24gdGhlIGFy
cmF5IG9mIGVuZ2luZXMsIGFuZCByZXR1cm4gaW1tZWRpYXRlbHkuCiAqIFRoZSBsZW5ndGggb2Yg
aW50ZXJmYWNlX2FjdGlvbnMgbXVzdCBtYXRjaCB0aGUgc2l6ZSBvZiBlbmdhcnJheS4KICogVGhl
IHN0YXR1cyBvZiB0aGUgcnVuIGNhbiBiZSBjaGVja2VkIGVpdGhlciBieSA6Om1heF93YWl0IG9y
IDo6bWF4X25vd2FpdDsKICogbm90ZSB0aGF0IG9uZSBvZiB0aGVzZSAqbXVzdCogYmUgY2FsbGVk
LCBzbyB0aGF0IGFzc29jaWF0ZWQgbWVtb3J5IGNhbiBiZSByZWxlYXNlZC4KICoKICogXHBhcmFt
IFtpbl0gZW5nYXJyYXkgVGhlIGFycmF5IG9mIGRldmljZXMgdG8gdXNlLgogKiBccGFyYW0gW2lu
XSBpbnRlcmZhY2VfYWN0aW9ucyBUaGUgYXJyYXkgb2YgYWN0aW9ucyB0byBydW4uCiAqIFxyZXR1
cm4gQSBoYW5kbGUgb24gdGhlIGV4ZWN1dGlvbiBzdGF0dXMgb2YgdGhlIGFjdGlvbnMsIG9yIE5V
TEwgaW4gY2FzZSBvZiBlcnJvci4KICovCm1heF9ydW5fdCAqR2F1c3NpYW5CbHVyREZFX3J1bl9h
cnJheV9ub25ibG9jayhtYXhfZW5nYXJyYXlfdCAqZW5nYXJyYXksIEdhdXNzaWFuQmx1ckRGRV9h
Y3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zW10pCnsKCW1heF9maWxlX3QgKm1heGZpbGUgPSBt
YXhfZW5nYXJyYXlfZ2V0X21heF9maWxlKGVuZ2FycmF5LCAwKTsKCWludCBpOwoJbWF4X2FjdGFy
cmF5X3QgKmFjdGFycmF5ID0gbWF4X2FjdGFycmF5X2luaXQobWF4ZmlsZSwgZW5nYXJyYXktPnNp
emUpOwoJaWYgKGFjdGFycmF5ID09IE5VTEwpIHJldHVybiBOVUxMOwoJbWF4X2FjdGlvbnNfdCAq
KmFycl9hY3Rpb25zID0gbWFsbG9jKGVuZ2FycmF5LT5zaXplICogc2l6ZW9mKG1heF9hY3Rpb25z
X3QqKSk7Cglmb3IgKCBpID0gMCA7IGkgPCBhY3RhcnJheS0+c2l6ZTsgaSsrICkgewoJCW1heF9h
Y3Rpb25zX3QgKmFjdGlvbnMgPSBHYXVzc2lhbkJsdXJERkVfY29udmVydF9pbnRlcm5hbChtYXhm
aWxlLCBpbnRlcmZhY2VfYWN0aW9uc1tpXSwgMSwgTlVMTCwgTlVMTCk7CgkJaWYgKGFjdGlvbnMg
PT0gTlVMTCkgcmV0dXJuIE5VTEw7CgkJYXJyX2FjdGlvbnNbaV0gPSBhY3Rpb25zOwoJCW1heF9z
ZXRfYWN0aW9uKGFjdGFycmF5LCBpLCBhY3Rpb25zKTsKCX0KCW1heF9ydW5fdCAqcnVuID0gbWF4
X3J1bl9hcnJheV9ub25ibG9jayhlbmdhcnJheSwgYWN0YXJyYXkpOwoJZm9yICggaSA9IDAgOyBp
IDwgYWN0YXJyYXktPnNpemUgOyBpKysgKSB7IG1heF9hY3Rpb25zX2ZyZWUoYXJyX2FjdGlvbnNb
aV0pOyB9CgltYXhfYWN0YXJyYXlfZnJlZShhY3RhcnJheSk7CglmcmVlKGFycl9hY3Rpb25zKTsK
CXJldHVybiBydW47Cn0KCgovKioKICogXGJyaWVmIENvbnZlcnRzIGEgc3RhdGljLWludGVyZmFj
ZSBhY3Rpb24gc3RydWN0IGludG8gYSBkeW5hbWljLWludGVyZmFjZSBtYXhfYWN0aW9uc190IHN0
cnVjdC4KICoKICogTm90ZSB0aGF0IHRoaXMgaXMgYW4gaW50ZXJuYWwgdXRpbGl0eSBmdW5jdGlv
biB1c2VkIGJ5IG90aGVyIGZ1bmN0aW9ucyBpbiB0aGUgc3RhdGljIGludGVyZmFjZS4KICoKICog
XHBhcmFtIFtpbl0gbWF4ZmlsZSBUaGUgbWF4ZmlsZSB0byB1c2UuCiAqIFxwYXJhbSBbaW5dIGlu
dGVyZmFjZV9hY3Rpb25zIFRoZSBpbnRlcmZhY2Utc3BlY2lmaWMgYWN0aW9ucyB0byBydW4uCiAq
IFxyZXR1cm4gVGhlIGR5bmFtaWMtaW50ZXJmYWNlIGFjdGlvbnMgdG8gcnVuLCBvciBOVUxMIGlu
IGNhc2Ugb2YgZXJyb3IuCiAqLwptYXhfYWN0aW9uc190KiBHYXVzc2lhbkJsdXJERkVfY29udmVy
dChtYXhfZmlsZV90ICptYXhmaWxlLCBHYXVzc2lhbkJsdXJERkVfYWN0aW9uc190ICppbnRlcmZh
Y2VfYWN0aW9ucykKewoJcmV0dXJuIEdhdXNzaWFuQmx1ckRGRV9jb252ZXJ0X2ludGVybmFsKG1h
eGZpbGUsIGludGVyZmFjZV9hY3Rpb25zLCAwLCBOVUxMLCBOVUxMKTsKfQoKI3VuZGVmIENIRUNL
X0VSUk9SU19TVAojdW5kZWYgQ0hFQ0tfTlVMTAoKCg==
#endif /* SLIC_B64_DEFINITIONS */

#ifdef SLIC_EXTRA_FILES
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PHVz
ZXJmaWxlcyBmb3JtYXQtdmVyc2lvbj0iMjAxMjAyMDAiLz4=
#endif /* SLIC_EXTRA_FILES */

#ifdef PHOTON_NODE_ADD_DATA
#define PHOTON_NODE_ADD_DATA_PRESENT 1
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 271, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 272, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 0, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 1, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 2, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 379, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 25, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 378, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 3, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 292, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 26, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 27, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 293, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 83, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 32, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 288, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 34, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 294, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 295, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 296, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 116, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 377, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 38, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 39, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 40, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 297, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 121, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 135, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 391, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 392, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 45, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 298, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 46, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 47, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 299, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 300, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 301, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 154, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 393, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 394, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 395, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 302, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 303, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 304, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 173, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 57, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 58, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 305, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 306, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 307, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 192, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 63, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 376, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 309, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 64, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 65, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 310, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 197, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 211, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 290, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 71, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 311, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 312, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 313, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 230, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 375, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 75, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 76, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 77, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 314, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 235, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 249, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 315, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 316, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 317, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 260, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 388, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 318, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 86, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 374, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 88, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 319, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 105, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 373, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 107, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 320, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 321, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 117, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 322, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 124, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 372, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 126, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 136, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 323, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 143, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 371, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 145, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 324, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 325, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 155, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 326, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 162, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 370, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 164, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 327, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 328, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 174, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 329, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 181, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 369, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 183, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 330, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 331, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 193, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 332, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 200, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 368, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 202, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 212, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 333, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 219, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 367, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 221, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 334, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 335, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 231, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 336, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 238, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 366, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 240, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 250, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 337, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 338, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 365, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 262, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 263, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 339, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 266, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 364, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 90, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 363, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 109, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 340, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 341, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 118, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 362, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 128, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 137, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 361, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 147, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 342, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 343, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 156, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 360, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 166, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 344, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 345, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 175, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 359, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 185, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 346, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 347, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 194, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 358, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 204, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 213, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 357, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 223, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 348, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 349, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 232, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 356, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 242, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 251, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 350, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 351, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 355, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 268, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 390, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 269, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 274, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 279, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 354, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 276, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 277, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 278, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 280, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 353, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 282, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 283, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 285, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 352, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 284, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianBlurDFEKernel, 4, "SquashFactor", 0.0)
#endif

#ifdef MAXFILE_SIGNATURE
#define MAXFILE_SIGNATURE_PRESENT 1
MAXFILE_SIGNATURE("302c0214194388ac52b9e7fc27ac3bcff5b7a90f3ec64a17021451300adc8b77f5cc99d55c65bbe30b7cc2d071a4")
#endif

#ifdef PARAM
#define PARAM_PRESENT 1
PARAM(TIMING_SCORE, 0)
#endif

#ifdef BITSTREAM
#error You are using too old sliccompile to compile this maxfile.
#endif
#ifdef BITSTREAM_NEW
#define BITSTREAM_COMPRESSED 1
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
Ad4oM/yd2wzzS7p9+dPSvCX3XzYtp/G01uaK0EVHs5cvOn634Q3HxCarf9AmPtbl800zr/0m++aK
XWWjtAOv+uvbIY033ZHVOCoi1Phmp/RryhjNeRN+vKaiY78xa/NL7nmltMfq9EjXelt65M0titvc
feT5Nzt2q1z75fjdXTZ+PnHvbu3AVZOHv5g0adeu2NX2ubouq+/5se2UY0/ds3zc7CmD1vzi0r/z
y+1HUi+PafrWIwXxjK7/GO3VTyVGjExgnzMy7vuz/bez3rij65sdD4/5fMqP6wdfufirNVet/atR
6sYm721euupWU/TNJT13PXTmukLDpLnxjW/LS2b52ty0vYnW3jIjrsfwbw60Xr6j718D+hZaX3jz
sd5DV+x+9cwLXzbN/WLD6ZErUwxdruly+9IPX225OukOd5eEb9Y9dGN48dvvp8aefHjLbGNF6FWZ
CZ+9NPrVPnOzwzcOvOTFlCO/H5zb4/Jbvnh41PNf2D8qer4qbMOqL+K/KDIU2J76fEnvxg7Pyn1L
X/0i5quwx15c6zmab9npyvqw6sG+C38+Pdj17m2nS9q9U/bJLWvTjkXPmZPT+ZI3LINj++WMf++v
9f37n9D0m/SrJ3rLnEmn9vUbtTXkuZ2H1v3Q7t0Ze63tmo25+eL2lgteO/PpIPdfjUav3xp+24Qn
LltUuidk+TUnb9Sv79foWGrM1F6R7g33rF7bYXvjKQN/3luYPPq+jy2WrtrP+439qvStGQ/3HjJo
5tKwjd+1vmXqiK0FPbtc+/1Px4692emqkl9nbT/51/ilF4658/qXz4zf2d/Q4nDo+uOFW67um+1Z
sGHZrnGGNwqqVnYaPH7EE4PZb0NZ+mr/kt6eC0ITNvZ8cnXJfTunXzp61ey4+NLOD9558om/Xt/z
dQH7Lfuhn09b7r0r/kb2+crn270Ty/LdZZkUceu02VOvv2JYn4n3ngzf+UuTXlc/2P2PFy7/ZdcT
S24w3sFor9EPXGDJ/fKS7p/vvn/CoZ+evfqNnSc+f+i+4sNvtxq7rYux+cnUOb/nVO0tTCl/9fH3
p5ZW/D71BXOP9akdX+vV9JPeLef03jz3zxFpz9y5bPuqW54Zv7P38Ycvbbz4phXp+37qaJ+UcUPG
ZcsnLbMsWHr9knGW7Zs/7mZfYbvrdEKnR4sdK07d2rvDI7u6ZsW3OFy6fXbxlgNvHhhp/OjED19P
fvKSPY+uSLnw2EPXh9y1d72r/dBcRvP1jMpG7+35/I3D0d9N++ayhX88dlFGftMNO362s9/e6BGa
cM+l7hzPvXkrjrdf/GhRzGcTX+0Xc4XruqG5z9zUdebGR74Ztf3urzRvM7qEcXcWdk/4uuQd9vmu
kX9sPrF2YWqTsX03FjI+5Rc91+XxJ74vf2j5Jwn56a1eGfrWngsOd/pjy2vHfr67u71inTlj6Y0T
vq9MuqHVtZ22sPxfnFnywKrN3zzy2pSjF1/74rtX3Xr01ovbD13S9fyKtw/qhv5115abjOXzun75
7oe7zmzZeJ29IPXE1a9+0ebQh+Meb7V+9HdnLjz25IMFA3976KN3NzbOOXDpzotGXz7v+/Cjv0U0
WvN04YJ1a7aeGmd4Krz7MfOVPy+t+mXYbl3BwS+6Wy686JfvD648dOWde0s/uvEV/dtrv593dfZV
a349/811CQu+StkU3vXwH6FjKxZpfli79fVH908b93XJ8KG/hO+LnJzy9DhXReH7fcfq128d8YB5
9uEeywwrOg79/ot5MXHf5evv1XZf88Hy/WvGJ3crGvf7Mzf+lf7GpsHTMu+7xmbNuq6w6/C+Yzc/
seZQiy9vyKz8YdSGV3tM2dFtue6miQ8s3fBV1uLePZ9t1n1hy1LnswkHP2w7b8Oe9MKrBk3/46GP
3r5/be9Xt2Q9u37uMyEljb7ot3DT/X0iCh96+dmvvzZ/3iEha/yEvGEHX1rywqDnqp78YlY33Y8P
PXXbnedXHApb/m3FTxNu3/bNxtySUaYXpv+SdWr0lUM2Js2Zc+utF0SN+PbXmUeXP3/HiclPmb4u
aZL4zKqyHVn3flZ0qumRM68069238s1xle5mrxyv6tC4nXFSs2i9fcE7FePDun1qP8BoLrjadfVB
ds3LdbUdlP7Hxje3Lb1k2eLF1/d+0vjWpJsnVi13XXzoy7Efzb+wi9ZQOi3uxU3mSyc903To8oVd
ddFLf+nx8pouZ544wfLv2D17d58O963oPvO816Z1XzXQ0c26w7YtrNGH6+5742VG/32HZy4f2fuu
F/I+Mu3+fuia1WvnHd0wae5Pru7Rr/9YMPpTc984q6FzTOWrYzpXzEs2zy1c3Edz6rfoP3SN+7oi
3mO0oR81Sh/4wpRrH1v49adml/aWG94+r8rm7jhm8evLorvfdqppx5zZh83PnY4IZ5/zrigbfbpn
zEUrL/3r0wvDbphz+w+XzRym7/Nw9scx2Xu7zL9TH118rNnMXc9/pb97QV9Gf0exZctjH973c98P
ovRfvrD8PNevT0QcajF0eY/MKz8omLDqir6PtHQ0c+dcdgmjNVgiQjsntd7ZeV72I3N6vfCRIfWd
wu8Y7cLvFx+I6Xnj9EM9nsi6c9B5SSF3zHxyx6B7Q/ckXzpp4th7FhXP7Dziy0P37vo11b3P3XVN
WeHuEnu7stYVPz9acd04w09//cHwXbcYr5oxN3ThIkZ7mn3v2evxqqpGB8bds+S5a7PGL3io8WcL
n+yz5MftU+csfunxJ/bc9d22nJeOpZ0cH35o7mPPfHnv1YcPfvVU6GNdVra4xr1v9D1uXcQqQ7Mr
B6Wl7brt9at+/emJ53/rdl3bfR0G7Tw66KYT05LS9GvOrNt07evvfdg96dLUOydePuWy58bdFRa2
v9OpTu92/Tn1cGLTRp/kTnl3UuNpTaKef3H9oz99eGDz4cqp8Uc7bjqYW/pn7l8vHpm9J3aY/aOr
9r9x4rnWBdlXjdm+4+OPl5xon3rppDZVV443XPPN5HaPd1k24JNfC2Omufd1D220bec7cXe/Oyvc
cnfiLRmHTtx9/eUMH1TQee2K+5ab261LWDvrxh8OX8mwE9cv/Tqrqu0Di29e/NJbKc92b37TZzte
+GzG9g+ePXqHtiA9fID15Pglt5REDV91+eLPvn+x7eED9179yIbxexNY3mu3zJ1Y8EP2nBZzO95Q
+uT4a5q+Yux55Ltyw53OYX0X7v+51briXy983FZ08v5dfeMjbn0/fveHZ3RTmrwSf3LJ1Tc9xfDe
4x+vepZdbz3W4sfnCvufqZqr10/M+2tdyZ9X/PJVp0hj3/M/cE5/fd+ByDWXh72zfvqA2brPu9ra
/zj5ZZZnTd7VV67Y12LsddoeF/72Zvah1Osu+PQyRpcy9dJJq/Pa3Lzy/NKd03e+98swhr35xjNN
Lzmx1TTsq3sSun7Zat28RqcPNr+g70fPH7u5cdyfq7fNG1ymWbul2RsOT17zB4r7Vo1meb66dfFL
d59K+XLoHRsvfN703JXdXtu5qGu3BVddktjzrVfXtu+xfdvKlr9+8dqOBVPv7ti/2xeP/Pbx3gEv
TN/x7f7vb7r087yik02/WnD/9sY3zmv866erHja9tqPf74c/fvvQ/TfMixxs2T7rTNQBRrP/4Opv
Ko98+PT6HK3uEPv+SZvB3/3xadctD54/6oXx95y5bsrXGyYvil654/D5Wd9d0/nhfhF/HUwrGzvt
49nrLg97acnTw2ZmXG9Y1azp0hMs75kuzy+3PLJmyP239bp1Dvs9arF9aoV50rbX7l4YeRP7HpJp
uePi36um9Rwc9/7Qh1LH9bko64Jj3Qfffu+uDtbb3jr4x6oeG9cZLo1/23ww52bD5PSrb79o1AdT
v7t+5cpvi7dGdhj2qfX5TY/PZ3w8B9eX/fXDki2jRrUvfdQyeWavrWsf7t5kf0HhkJj775pr++Zg
45jJj47du3uzTbt5UmkLz4lv7miZntun14Hf7Vlnnk+atOSzG9+s3P/0m5/OTL1wy8P3fX5Jx70b
vn3wxNfHP/yhbdMlSZP0+2/qtMVQWfxk7KdfnhxaurI5wxqtjP5zTNgVT7XNO575bp+pbY7/MD8n
c6+9c1T8XT+3j3juSMgH6RH3LTxzXfFdmpd+//6uZ8bsaTN1Tf+E37Y98Uqndiy/pp6/xpoWGueX
/GLRCyyubq9AG9qqkSK+rYMy/YttlXF9KZu7KOBvnFamf7JKGRcWAZXwgxcoy7nplHK5E7sq06dH
KvMfe5Ey/RAV/ZzfrZFiudlNlOkHhyrj1/+hLM/cEGVcaNVwBdyigr/URpnPEBV76H6Bcr2qQpXp
41oq1ytXzd4aKdN/rGJXj/2pjEe2UMY7qcj56xllvGkjZfxqlfYq66qsn8YXKtOPUanvKBU512mU
6Rer2PONKnLufV2Z/yCV/pipYue2CBW9qei/SK3fqfTToSp6uFCjbM93LFemn5+gjL+kop/7mynj
J1T8zGkV3PWGSv9V8SexGuV69W2qzGe3Srl5Kna7/S9lPImlXgr4IhX6Z1X85PBXlNtxysvK+DeN
leVfoaK34Y2U+bymwidbBe+n4peyVPR8aolyuTEq/fGoit2er1Jucogy/qpK+xar2E9rFX9+qLky
/ROtlenv6qBMP/Z8ZfrvVNrrRxX/dv4pZXq3Sr3mqOh5u4r/f0Zl/N1ynjL9Gyr+/1IVPou6qPg9
tXFBpR2XqNjJRyp2kq3Svz5V4X+PSns1UtH/bBU+01X850YVu3rgNWV6g8o40lPFfnqq+Jk+KuNI
sYr8LVT0kKQiT6wK/x4q8dtcFTupULGHW1qoxEUq9u9Qsc9iFXs42kWZz/Mq+pmt0r7jVOLwN1T8
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
R6fFI8ALyM1POI4ZKMBc6JVUweGFWMxH7n9FiIxazGpovtwZXcu9RAtn74dtFPDv/UIDdEmFsvvx
pRVGZcd4gZRCNZ9RH0ZcXTqy54MgQkm6Y8SIcQF2f/iFsmHcEKMokYzWwflk/JecD1sofNiS8mHL
fzkflnHLhw495/X/qp7TbdM56zldMT0XAXruGKPnIp5TzzX7D+q5Ht//d+q5Gd+51XO6Euu5Rt+5
13Plvvsf6jmv/7/quQiFv3SUv3T/cv7y+s/qOa1Dz/n9B/RcC4ee++3/Us+1dNZzLd3quRzz0+ag
53TPqedautBz5zMVPadV0XN+z6nnWvxP9Fxx0blXisrk9Zy2mJ7zc+i5CE7Ptfqf6zmdSz3nfC6p
nlu6S9FzR/85Pffr/1jPtfwf67mi/wU911Lhw1aUD1v9y/lQ617PsSquEhZmpvrQf1Jsx4sJtiwq
2OwVqMLTpt5DRQaHfjP8LOs3Q9m9IP4qgGIKNDw6Fxfyl70U/uFQbzHWnaDcdJmibUHWr+hfWuGA
+XEwXurU9jxqtWLx9jhkRwguOB2bVoS/TqHX9vot/JBWOGVNw2IuP2Ru2bSzSYm2uqguaWdN7axp
V0DZ5bfJAFmk7bXfKI4ODQvfDwMpTC/+IZVbVVgEGgWNxTDoYQ2NIXeNUXdNdfFrJfBN/JQo1N6j
KBw5F9noX2JVxHpzQv0BLXhrPRATEtxe0O9qhQXgHRCAAbIALIi1zkIC8IJe/BMJRl+9+Lu9MVnP
Lr6et4rVf/tBAyLldw/rv3xW/534T+i/YLf6L/g/uZ63CssyP6aDxKAQ/vNGwZkPxHIwAclBX58m
oTuCHWowwmgdHRrBrMdzrHcD6cFvVrrXg4uRHfUWaF0KaTK6pAHz1HRhK04XimdMo4gWHIK0YEOg
ONSLzyAlaAy5bxeAD3E3ge69CfcO+3oiCJuwghClLucdcrCyvRyRg+J5U2ljSB4vAcsgoXeIUX/w
e4+68GtPhd+Cfbi3yvovVNF/A+CWjyA+NexyyE5LY2ErGZvBiA8k1FPmaFHXN2pj8o1ie1t/SHLy
tKl10d9knfgINQJ1QNSMduITlH8dzxXEJsf1WFnow/NjYeRfg0mjQXvbDUycv2iXBkOCRO442/5A
/yGDVT6GaKbwx3rxsf7RaV1uXpaP6UXsEv7YfMlHl+vQI9aqzQVL1eOCWNUuFO2LsiXd1psf+0xf
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
3Wi94rKMNbNyHPlTpZtIWpCdnZ/lSMxZO1WKMkmXz1+YNHf+HIuUesWChbMXJKfY5iTPmZ/aOxU9
f3N+7ZIvw790/Lsd/17Bv4YvZfkTzb/nmFr3vfhHH4L4Gf9+ZH7B1P4jXfk3YHPPPzq2nqh1p986
5bkwZ8WctZlZeY6cVSvnSNCmr8jPSc9ZmePIycjNuSFrqqlg5fUrV61ZacpSzbxaSbOtCUnz021z
5s9NtUoJKSnpSRbpsjlphCsyVq/MWblsqolK1rE6K2OFqSA/K99kz8pbnZWZ4UA7VINck5HjSFds
0nNW/8mUXbAyk+I8T1qYetmchOT0xMsWJKdbFyxMVR1SF7CoeJqi/rhI/TEhWvLaCLr1E9Vfk7qd
YqTZGXkZS3NycxzrLstaJs1enpV5fX7BiuSsFatWr5PsWZMzJ2dmRk/JvmjiRHt2hn1KZkb25Ngp
2dHZ9uiJ9qWxcZMmR1+UtfSibPuUmCnRcfbsrNisuKwJkydlZ07MmJQl5WTnLcuQ8rMzeidNWrk2
OWOtZLlyfkJy0uz02bYFs+ctTJ8zP2GWDe0uaWH6wqTky20JqUkL5kvJc2anL7w8JWXBZanQpcxO
mpO+0JaQhv9FySTNn6s4JtjQakVDnX95cnpSYsrchHRb0vx5C6WclXkFDmlVgYPgtZDG5axKX5ue
vWp1Zla6PSc/Y2kuRgbvlmt03PPRPvQDX9e/wFcXrEzPXJeZm5WeuapgpV5iMwtWr8Zolt4/a/vS
ZemZjlx7ekbuilX5jvSsFXmOdX3Z2let1MtNt02/AkJD08usm016Xk4eimfpsr6N/1SQle8rs5T2
9FW6VU0m2Tm5uem5WYXoHj6Mcgvyl/fTKt+RsdpnhD1W/QsRA4kvk4J+pB9FQDHm9mVTiLHNVx2J
MNILszIdq1YrXXqc+B/1sRrDS86ylRm5iatWr8lYbUeqE+wZeY6s1eMWJiakJy647IqEyyzo2JIt
KTkB46TKBOVHQrJksVwWkx4zZe4s4UK9VlqbmXZ5XEp6om3urIkTomPSJ6bPkRaI3msaPWrCqHGj
Jo4abcrJN2XmZuTnm0ZdNMq0ZnlO5nJyWrnKYaKBP8ORg25mWpPjWA4/MfAzCX5WZat+YkeNk1Iu
t9nw30KrdDmP/UkLFP04Kd+xKkcalS/NueyyBZdNNeEakrI6Z6Uj24RuvCKD0iGNFpHlF+TlrVqN
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
7PzKGbomTrcrdx2/xtaPv///Amahu7BwSwUA
#endif

#ifdef PARAM
PARAM(BITSTREAM_SIZE, 346992)
#endif
